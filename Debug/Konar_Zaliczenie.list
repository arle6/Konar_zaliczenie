
Konar_Zaliczenie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed0  08007ed0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed8  08007ed8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007edc  08007edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000060  08007f40  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08007f40  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149c9  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280f  00000000  00000000  00034a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  000372b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ead  00000000  00000000  00038558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027875  00000000  00000000  00039405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a1c  00000000  00000000  00060c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5a61  00000000  00000000  00078696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005490  00000000  00000000  0016e0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00173588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007de4 	.word	0x08007de4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007de4 	.word	0x08007de4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <hts221_write>:
volatile bool send_data = false;
volatile bool button_pressed = false;
volatile bool read_ready = false;
static volatile bool transmistionComleteFlag = true;

void hts221_write(uint8_t adress, uint8_t value) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af04      	add	r7, sp, #16
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, HTS221_I2C_ADRESS, adress, 1, &value, 1, HAL_MAX_DELAY);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	b29a      	uxth	r2, r3
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	9302      	str	r3, [sp, #8]
 8000596:	2301      	movs	r3, #1
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	1dbb      	adds	r3, r7, #6
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	21be      	movs	r1, #190	; 0xbe
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <hts221_write+0x34>)
 80005a4:	f001 fa9e 	bl	8001ae4 <HAL_I2C_Mem_Write>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000007c 	.word	0x2000007c

080005b4 <hts221_read>:
void hts221_read(uint8_t adress, uint8_t *dest, uint8_t num) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af04      	add	r7, sp, #16
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, HTS221_I2C_ADRESS, adress, 1, dest, num, HAL_MAX_DELAY);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295
 80005d0:	9102      	str	r1, [sp, #8]
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	21be      	movs	r1, #190	; 0xbe
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <hts221_read+0x38>)
 80005de:	f001 fb95 	bl	8001d0c <HAL_I2C_Mem_Read>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000007c 	.word	0x2000007c

080005f0 <hts221_read_it>:
void hts221_read_it(uint8_t adress, uint8_t num) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	460a      	mov	r2, r1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read_IT(&hi2c1, HTS221_I2C_ADRESS, adress, 1, buffer, num);
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	b29a      	uxth	r2, r3
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	b29b      	uxth	r3, r3
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <hts221_read_it+0x30>)
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	21be      	movs	r1, #190	; 0xbe
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <hts221_read_it+0x34>)
 8000614:	f001 fc94 	bl	8001f40 <HAL_I2C_Mem_Read_IT>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000230 	.word	0x20000230
 8000624:	2000007c 	.word	0x2000007c

08000628 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if(hi2c==&hi2c1) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a06      	ldr	r2, [pc, #24]	; (800064c <HAL_I2C_MemRxCpltCallback+0x24>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d102      	bne.n	800063e <HAL_I2C_MemRxCpltCallback+0x16>
		read_ready = true;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_I2C_MemRxCpltCallback+0x28>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
	}
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2000007c 	.word	0x2000007c
 8000650:	20000234 	.word	0x20000234

08000654 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if(htim==&htim15) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d104      	bne.n	800066e <HAL_TIM_PeriodElapsedCallback+0x1a>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000664:	2120      	movs	r1, #32
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f001 f96d 	bl	8001948 <HAL_GPIO_TogglePin>
	}
	if(htim==&htim16 && transmistionComleteFlag) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d107      	bne.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x32>
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x32>
		send_data = true;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
	}
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000d0 	.word	0x200000d0
 8000694:	2000011c 	.word	0x2000011c
 8000698:	20000000 	.word	0x20000000
 800069c:	20000232 	.word	0x20000232

080006a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin) {
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b0:	d102      	bne.n	80006b8 <HAL_GPIO_EXTI_Callback+0x18>
		button_pressed = true;
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
	}
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	20000233 	.word	0x20000233

080006c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
     if(huart==&huart2) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_UART_TxCpltCallback+0x24>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d102      	bne.n	80006de <HAL_UART_TxCpltCallback+0x16>
    	 transmistionComleteFlag = true;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_UART_TxCpltCallback+0x28>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
     }
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000168 	.word	0x20000168
 80006f0:	20000000 	.word	0x20000000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fd49 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f8ff 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f000 fab7 	bl	8000c74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000706:	f000 fa85 	bl	8000c14 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800070a:	f000 fa0d 	bl	8000b28 <MX_TIM16_Init>
  MX_TIM15_Init();
 800070e:	f000 f989 	bl	8000a24 <MX_TIM15_Init>
  MX_I2C1_Init();
 8000712:	f000 f947 	bl	80009a4 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  bool correct_I2C_adress = false;
 8000716:	2300      	movs	r3, #0
 8000718:	75fb      	strb	r3, [r7, #23]
  bool read = false;
 800071a:	2300      	movs	r3, #0
 800071c:	75bb      	strb	r3, [r7, #22]
  //uint32_t tmp;
  uint16_t value;

  uint8_t who_i_am, H0_rh_x2, H1_rh_x2;

  const char percent = '%';
 800071e:	2325      	movs	r3, #37	; 0x25
 8000720:	72fb      	strb	r3, [r7, #11]

  hts221_read(HTS221_WHO_AM_I, &who_i_am, 1);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	2201      	movs	r2, #1
 8000726:	4619      	mov	r1, r3
 8000728:	200f      	movs	r0, #15
 800072a:	f7ff ff43 	bl	80005b4 <hts221_read>

  if(who_i_am == 0b10111100) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2bbc      	cmp	r3, #188	; 0xbc
 8000732:	d102      	bne.n	800073a <main+0x46>
	  correct_I2C_adress = true;
 8000734:	2301      	movs	r3, #1
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00d      	b.n	8000756 <main+0x62>
	  //sprintf(string, "Poprawny adres czujnika HTS221\n\r");
	  //HAL_UART_Transmit_IT(&huart2, (uint8_t *)string, strlen(string));
  }
  else {
	  sprintf(string, "Błędny adres czujnika HTS221\n\r");
 800073a:	4965      	ldr	r1, [pc, #404]	; (80008d0 <main+0x1dc>)
 800073c:	4865      	ldr	r0, [pc, #404]	; (80008d4 <main+0x1e0>)
 800073e:	f006 fead 	bl	800749c <siprintf>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t *)string, strlen(string));
 8000742:	4864      	ldr	r0, [pc, #400]	; (80008d4 <main+0x1e0>)
 8000744:	f7ff fd44 	bl	80001d0 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29b      	uxth	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	4961      	ldr	r1, [pc, #388]	; (80008d4 <main+0x1e0>)
 8000750:	4861      	ldr	r0, [pc, #388]	; (80008d8 <main+0x1e4>)
 8000752:	f005 fd71 	bl	8006238 <HAL_UART_Transmit_IT>
  }

  HAL_TIM_Base_Start_IT(&htim15);
 8000756:	4861      	ldr	r0, [pc, #388]	; (80008dc <main+0x1e8>)
 8000758:	f004 fe20 	bl	800539c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 800075c:	4860      	ldr	r0, [pc, #384]	; (80008e0 <main+0x1ec>)
 800075e:	f004 fe1d 	bl	800539c <HAL_TIM_Base_Start_IT>

  if(correct_I2C_adress) {
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 80aa 	beq.w	80008be <main+0x1ca>
	  hts221_write(HTS221_CTRL_REG2, (1<<7));
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	2021      	movs	r0, #33	; 0x21
 800076e:	f7ff ff05 	bl	800057c <hts221_write>
	  hts221_write(HTS221_CTRL_REG1, (1<<1) | (1<<0));
 8000772:	2103      	movs	r1, #3
 8000774:	2020      	movs	r0, #32
 8000776:	f7ff ff01 	bl	800057c <hts221_write>

	  hts221_read(HTS221_H0_RH_X2, &H0_rh_x2, 1);
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	2030      	movs	r0, #48	; 0x30
 8000782:	f7ff ff17 	bl	80005b4 <hts221_read>
	  hts221_read(HTS221_H1_RH_X2, &H1_rh_x2, 1);
 8000786:	1d7b      	adds	r3, r7, #5
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	2031      	movs	r0, #49	; 0x31
 800078e:	f7ff ff11 	bl	80005b4 <hts221_read>
	  H0_rh = H0_rh_x2 / 2;
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	823b      	strh	r3, [r7, #16]
	  H1_rh = H1_rh_x2 / 2;
 800079a:	797b      	ldrb	r3, [r7, #5]
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	81fb      	strh	r3, [r7, #14]
	  hts221_read(HTS221_H0_T0_OUT_L, buffer, 2);
 80007a2:	2202      	movs	r2, #2
 80007a4:	494f      	ldr	r1, [pc, #316]	; (80008e4 <main+0x1f0>)
 80007a6:	2036      	movs	r0, #54	; 0x36
 80007a8:	f7ff ff04 	bl	80005b4 <hts221_read>
	  H0_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 80007ac:	4b4d      	ldr	r3, [pc, #308]	; (80008e4 <main+0x1f0>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <main+0x1f0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b21b      	sxth	r3, r3
 80007be:	82bb      	strh	r3, [r7, #20]
	  hts221_read(HTS221_H1_T0_OUT_L, buffer, 2);
 80007c0:	2202      	movs	r2, #2
 80007c2:	4948      	ldr	r1, [pc, #288]	; (80008e4 <main+0x1f0>)
 80007c4:	203a      	movs	r0, #58	; 0x3a
 80007c6:	f7ff fef5 	bl	80005b4 <hts221_read>
	  H1_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 80007ca:	4b46      	ldr	r3, [pc, #280]	; (80008e4 <main+0x1f0>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	4b44      	ldr	r3, [pc, #272]	; (80008e4 <main+0x1f0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21b      	sxth	r3, r3
 80007dc:	827b      	strh	r3, [r7, #18]
  }

  while (1 && correct_I2C_adress)
 80007de:	e06e      	b.n	80008be <main+0x1ca>
  {
	  if(send_data) {
 80007e0:	4b41      	ldr	r3, [pc, #260]	; (80008e8 <main+0x1f4>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d04b      	beq.n	8000882 <main+0x18e>
		  if(!read) {
 80007ea:	7dbb      	ldrb	r3, [r7, #22]
 80007ec:	f083 0301 	eor.w	r3, r3, #1
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d005      	beq.n	8000802 <main+0x10e>
			  hts221_read_it(HTS221_HR_OUT_L_REG, 2);
 80007f6:	2102      	movs	r1, #2
 80007f8:	2028      	movs	r0, #40	; 0x28
 80007fa:	f7ff fef9 	bl	80005f0 <hts221_read_it>
			  read = true;
 80007fe:	2301      	movs	r3, #1
 8000800:	75bb      	strb	r3, [r7, #22]
		  }
		  if(read_ready) {
 8000802:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <main+0x1f8>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d03a      	beq.n	8000882 <main+0x18e>
			  transmistionComleteFlag = false;
 800080c:	4b38      	ldr	r3, [pc, #224]	; (80008f0 <main+0x1fc>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
			  send_data = false;
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <main+0x1f4>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
			  read_ready = false;
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <main+0x1f8>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
			  read = false;
 800081e:	2300      	movs	r3, #0
 8000820:	75bb      	strb	r3, [r7, #22]
			  H_T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000822:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <main+0x1f0>)
 8000824:	785b      	ldrb	r3, [r3, #1]
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b21a      	sxth	r2, r3
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <main+0x1f0>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b21b      	sxth	r3, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	b21b      	sxth	r3, r3
 8000834:	813b      	strh	r3, [r7, #8]
			  value = ((H1_rh - H0_rh) * (H_T_out - H0_T0_out)) / (H1_T0_out - H0_T0_out) + H0_rh;
 8000836:	89fa      	ldrh	r2, [r7, #14]
 8000838:	8a3b      	ldrh	r3, [r7, #16]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	8939      	ldrh	r1, [r7, #8]
 800083e:	8aba      	ldrh	r2, [r7, #20]
 8000840:	1a8a      	subs	r2, r1, r2
 8000842:	fb03 f202 	mul.w	r2, r3, r2
 8000846:	8a79      	ldrh	r1, [r7, #18]
 8000848:	8abb      	ldrh	r3, [r7, #20]
 800084a:	1acb      	subs	r3, r1, r3
 800084c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	8a3b      	ldrh	r3, [r7, #16]
 8000854:	4413      	add	r3, r2
 8000856:	81bb      	strh	r3, [r7, #12]
			  //tmp = ((int32_t)(H_T_out - H0_T0_out)) * ((int32_t)(H1_rh - H0_rh)*10);
			  //value = (uint16_t)(tmp/(H1_T0_out - H0_T0_out) + H0_rh*10);
			  if(value > 100) value = 100;
 8000858:	89bb      	ldrh	r3, [r7, #12]
 800085a:	2b64      	cmp	r3, #100	; 0x64
 800085c:	d901      	bls.n	8000862 <main+0x16e>
 800085e:	2364      	movs	r3, #100	; 0x64
 8000860:	81bb      	strh	r3, [r7, #12]

			  sprintf(string, "Wilgotność RH: %d%c\n\r", value, percent);
 8000862:	89ba      	ldrh	r2, [r7, #12]
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	4923      	ldr	r1, [pc, #140]	; (80008f4 <main+0x200>)
 8000868:	481a      	ldr	r0, [pc, #104]	; (80008d4 <main+0x1e0>)
 800086a:	f006 fe17 	bl	800749c <siprintf>
			  HAL_UART_Transmit_IT(&huart2, (uint8_t *)string, strlen(string));
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <main+0x1e0>)
 8000870:	f7ff fcae 	bl	80001d0 <strlen>
 8000874:	4603      	mov	r3, r0
 8000876:	b29b      	uxth	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	4916      	ldr	r1, [pc, #88]	; (80008d4 <main+0x1e0>)
 800087c:	4816      	ldr	r0, [pc, #88]	; (80008d8 <main+0x1e4>)
 800087e:	f005 fcdb 	bl	8006238 <HAL_UART_Transmit_IT>
		  }
	  }

	  if(button_pressed && transmistionComleteFlag) {
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <main+0x204>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d018      	beq.n	80008be <main+0x1ca>
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <main+0x1fc>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d013      	beq.n	80008be <main+0x1ca>
		  button_pressed = false;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <main+0x204>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
		  transmistionComleteFlag = false;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <main+0x1fc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
		  sprintf(string, "\n\rNaciśnięto przycisk\n\r\n\r");
 80008a2:	4916      	ldr	r1, [pc, #88]	; (80008fc <main+0x208>)
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <main+0x1e0>)
 80008a6:	f006 fdf9 	bl	800749c <siprintf>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t *)string, strlen(string));
 80008aa:	480a      	ldr	r0, [pc, #40]	; (80008d4 <main+0x1e0>)
 80008ac:	f7ff fc90 	bl	80001d0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	4907      	ldr	r1, [pc, #28]	; (80008d4 <main+0x1e0>)
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <main+0x1e4>)
 80008ba:	f005 fcbd 	bl	8006238 <HAL_UART_Transmit_IT>
  while (1 && correct_I2C_adress)
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d18d      	bne.n	80007e0 <main+0xec>
 80008c4:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08007dfc 	.word	0x08007dfc
 80008d4:	200001f0 	.word	0x200001f0
 80008d8:	20000168 	.word	0x20000168
 80008dc:	200000d0 	.word	0x200000d0
 80008e0:	2000011c 	.word	0x2000011c
 80008e4:	20000230 	.word	0x20000230
 80008e8:	20000232 	.word	0x20000232
 80008ec:	20000234 	.word	0x20000234
 80008f0:	20000000 	.word	0x20000000
 80008f4:	08007e20 	.word	0x08007e20
 80008f8:	20000233 	.word	0x20000233
 80008fc:	08007e38 	.word	0x08007e38

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b096      	sub	sp, #88	; 0x58
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2244      	movs	r2, #68	; 0x44
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f006 fde4 	bl	80074dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000922:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000926:	f003 f9cf 	bl	8003cc8 <HAL_PWREx_ControlVoltageScaling>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000930:	f000 fa1e 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2310      	movs	r3, #16
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000946:	2302      	movs	r3, #2
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800094e:	230a      	movs	r3, #10
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000952:	2307      	movs	r3, #7
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fa06 	bl	8003d74 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800096e:	f000 f9ff 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2303      	movs	r3, #3
 8000978:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	2104      	movs	r1, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fdce 	bl	800452c <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000996:	f000 f9eb 	bl	8000d70 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3758      	adds	r7, #88	; 0x58
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <MX_I2C1_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009e0:	f000 ffe4 	bl	80019ac <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f000 f9c1 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009f2:	f003 f8c3 	bl	8003b7c <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f000 f9b8 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_I2C1_Init+0x74>)
 8000a04:	f003 f905 	bl	8003c12 <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 f9af 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000007c 	.word	0x2000007c
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	10909cec 	.word	0x10909cec

08000a24 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b096      	sub	sp, #88	; 0x58
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	222c      	movs	r2, #44	; 0x2c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f006 fd43 	bl	80074dc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a56:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000a58:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <MX_TIM15_Init+0x100>)
 8000a5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 6153;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000a5e:	f641 0209 	movw	r2, #6153	; 0x1809
 8000a62:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 499;
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000a6c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a70:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8000a84:	4826      	ldr	r0, [pc, #152]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000a86:	f004 fcf9 	bl	800547c <HAL_TIM_OC_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8000a90:	f000 f96e 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481f      	ldr	r0, [pc, #124]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000aa4:	f005 fa56 	bl	8005f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8000aae:	f000 f95f 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000ad8:	f004 fe2a 	bl	8005730 <HAL_TIM_OC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8000ae2:	f000 f945 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_TIM15_Init+0xfc>)
 8000b0a:	f005 faab 	bl	8006064 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8000b14:	f000 f92c 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3758      	adds	r7, #88	; 0x58
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000d0 	.word	0x200000d0
 8000b24:	40014000 	.word	0x40014000

08000b28 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b092      	sub	sp, #72	; 0x48
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	615a      	str	r2, [r3, #20]
 8000b40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	222c      	movs	r2, #44	; 0x2c
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fcc7 	bl	80074dc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b50:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <MX_TIM16_Init+0xe8>)
 8000b52:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7272;
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b56:	f641 4268 	movw	r2, #7272	; 0x1c68
 8000b5a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b68:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b7c:	4823      	ldr	r0, [pc, #140]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b7e:	f004 fbb5 	bl	80052ec <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8000b88:	f000 f8f2 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000b8e:	f004 fc75 	bl	800547c <HAL_TIM_OC_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8000b98:	f000 f8ea 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000bc2:	f004 fdb5 	bl	8005730 <HAL_TIM_OC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000bcc:	f000 f8d0 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_TIM16_Init+0xe4>)
 8000bf4:	f005 fa36 	bl	8006064 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000bfe:	f000 f8b7 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	3748      	adds	r7, #72	; 0x48
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000011c 	.word	0x2000011c
 8000c10:	40014400 	.word	0x40014400

08000c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MX_USART2_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c58:	f005 faa0 	bl	800619c <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 f885 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000168 	.word	0x20000168
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a35      	ldr	r2, [pc, #212]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <MX_GPIO_Init+0xf0>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f000 fe11 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4816      	ldr	r0, [pc, #88]	; (8000d68 <MX_GPIO_Init+0xf4>)
 8000d0e:	f000 fc59 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d12:	2320      	movs	r3, #32
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f000 fc4a 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000d48:	f000 fc3c 	bl	80015c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2028      	movs	r0, #40	; 0x28
 8000d52:	f000 fb74 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d56:	2028      	movs	r0, #40	; 0x28
 8000d58:	f000 fb8d 	bl	8001476 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	48000400 	.word	0x48000400

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ac      	sub	sp, #176	; 0xb0
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2288      	movs	r2, #136	; 0x88
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 fb79 	bl	80074dc <memset>
  if(hi2c->Instance==I2C1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_I2C_MspInit+0xc0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d143      	bne.n	8000e7c <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 fdb7 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e0c:	f7ff ffb0 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_I2C_MspInit+0xc4>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_I2C_MspInit+0xc4>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_I2C_MspInit+0xc4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e42:	2304      	movs	r3, #4
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480f      	ldr	r0, [pc, #60]	; (8000e8c <HAL_I2C_MspInit+0xc8>)
 8000e50:	f000 fbb8 	bl	80015c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_I2C_MspInit+0xc4>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_I2C_MspInit+0xc4>)
 8000e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_I2C_MspInit+0xc4>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	201f      	movs	r0, #31
 8000e72:	f000 fae4 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e76:	201f      	movs	r0, #31
 8000e78:	f000 fafd 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	37b0      	adds	r7, #176	; 0xb0
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40005400 	.word	0x40005400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000400 	.word	0x48000400

08000e90 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM15)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_TIM_OC_MspInit+0x44>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d113      	bne.n	8000eca <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_TIM_OC_MspInit+0x48>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a0c      	ldr	r2, [pc, #48]	; (8000ed8 <HAL_TIM_OC_MspInit+0x48>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_TIM_OC_MspInit+0x48>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2018      	movs	r0, #24
 8000ec0:	f000 fabd 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ec4:	2018      	movs	r0, #24
 8000ec6:	f000 fad6 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40014000 	.word	0x40014000
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_TIM_Base_MspInit+0x44>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d113      	bne.n	8000f16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_TIM_Base_MspInit+0x48>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_TIM_Base_MspInit+0x48>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_TIM_Base_MspInit+0x48>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2019      	movs	r0, #25
 8000f0c:	f000 fa97 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f10:	2019      	movs	r0, #25
 8000f12:	f000 fab0 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40014400 	.word	0x40014400
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b0ac      	sub	sp, #176	; 0xb0
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2288      	movs	r2, #136	; 0x88
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f006 fac7 	bl	80074dc <memset>
  if(huart->Instance==USART2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a25      	ldr	r2, [pc, #148]	; (8000fe8 <HAL_UART_MspInit+0xc0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d143      	bne.n	8000fe0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fd05 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f70:	f7ff fefe 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_UART_MspInit+0xc4>)
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <HAL_UART_MspInit+0xc4>)
 8000f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_UART_MspInit+0xc4>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0xc4>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f90:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_UART_MspInit+0xc4>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0xc4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f000 fafa 	bl	80015c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2026      	movs	r0, #38	; 0x26
 8000fd6:	f000 fa32 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fda:	2026      	movs	r0, #38	; 0x26
 8000fdc:	f000 fa4b 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	37b0      	adds	r7, #176	; 0xb0
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40021000 	.word	0x40021000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f904 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800104a:	f004 fa6e 	bl	800552a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000d0 	.word	0x200000d0

08001058 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800105e:	f004 fa64 	bl	800552a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000011c 	.word	0x2000011c

0800106c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <I2C1_EV_IRQHandler+0x10>)
 8001072:	f000 ffeb 	bl	800204c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000007c 	.word	0x2000007c

08001080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <USART2_IRQHandler+0x10>)
 8001086:	f005 f935 	bl	80062f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000168 	.word	0x20000168

08001094 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001098:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800109c:	f000 fc6e 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010a4:	f000 fc6a 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f006 fa06 	bl	80074ec <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20018000 	.word	0x20018000
 800110c:	00000400 	.word	0x00000400
 8001110:	20000238 	.word	0x20000238
 8001114:	20000388 	.word	0x20000388

08001118 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001140:	f7ff ffea 	bl	8001118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <LoopForever+0x6>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	; (800117c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <LoopForever+0xe>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <LoopForever+0x12>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	; (8001188 <LoopForever+0x16>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116a:	f006 f9c5 	bl	80074f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116e:	f7ff fac1 	bl	80006f4 <main>

08001172 <LoopForever>:

LoopForever:
    b LoopForever
 8001172:	e7fe      	b.n	8001172 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001174:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001180:	08007ee0 	.word	0x08007ee0
  ldr r2, =_sbss
 8001184:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001188:	20000388 	.word	0x20000388

0800118c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC1_2_IRQHandler>
	...

08001190 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_Init+0x3c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <HAL_Init+0x3c>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 f93e 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f80f 	bl	80011d0 <HAL_InitTick>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	e001      	b.n	80011c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011be:	f7ff fddd 	bl	8000d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c2:	79fb      	ldrb	r3, [r7, #7]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40022000 	.word	0x40022000

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_InitTick+0x6c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d023      	beq.n	800122c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_InitTick+0x70>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f949 	bl	8001492 <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10f      	bne.n	8001226 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d809      	bhi.n	8001220 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f913 	bl	800143e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0x74>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e007      	b.n	8001230 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e004      	b.n	8001230 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e001      	b.n	8001230 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000000c 	.word	0x2000000c
 8001240:	20000004 	.word	0x20000004
 8001244:	20000008 	.word	0x20000008

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000000c 	.word	0x2000000c
 800126c:	2000023c 	.word	0x2000023c

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000023c 	.word	0x2000023c

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff3e 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff8e 	bl	800137c <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5d 	bl	8001328 <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff31 	bl	80012ec <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa2 	bl	80013e4 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d008      	beq.n	80014d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2204      	movs	r2, #4
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e022      	b.n	800151a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 020e 	bic.w	r2, r2, #14
 80014e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	f003 021c 	and.w	r2, r3, #28
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d005      	beq.n	800154a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e029      	b.n	800159e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 020e 	bic.w	r2, r2, #14
 8001558:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f003 021c 	and.w	r2, r3, #28
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
    }
  }
  return status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b6:	b2db      	uxtb	r3, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	e17f      	b.n	80018d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2101      	movs	r1, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8171 	beq.w	80018ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d005      	beq.n	8001604 <HAL_GPIO_Init+0x40>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d130      	bne.n	8001666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800163a:	2201      	movs	r2, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	f003 0201 	and.w	r2, r3, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b03      	cmp	r3, #3
 8001670:	d118      	bne.n	80016a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001678:	2201      	movs	r2, #1
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	f003 0201 	and.w	r2, r3, #1
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d017      	beq.n	80016e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d123      	bne.n	8001734 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	6939      	ldr	r1, [r7, #16]
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80ac 	beq.w	80018ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_GPIO_Init+0x330>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	4a5e      	ldr	r2, [pc, #376]	; (80018f4 <HAL_GPIO_Init+0x330>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6613      	str	r3, [r2, #96]	; 0x60
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_GPIO_Init+0x330>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800178e:	4a5a      	ldr	r2, [pc, #360]	; (80018f8 <HAL_GPIO_Init+0x334>)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017b8:	d025      	beq.n	8001806 <HAL_GPIO_Init+0x242>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4f      	ldr	r2, [pc, #316]	; (80018fc <HAL_GPIO_Init+0x338>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01f      	beq.n	8001802 <HAL_GPIO_Init+0x23e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4e      	ldr	r2, [pc, #312]	; (8001900 <HAL_GPIO_Init+0x33c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_Init+0x23a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4d      	ldr	r2, [pc, #308]	; (8001904 <HAL_GPIO_Init+0x340>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x236>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4c      	ldr	r2, [pc, #304]	; (8001908 <HAL_GPIO_Init+0x344>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x232>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4b      	ldr	r2, [pc, #300]	; (800190c <HAL_GPIO_Init+0x348>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x22e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4a      	ldr	r2, [pc, #296]	; (8001910 <HAL_GPIO_Init+0x34c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x22a>
 80017ea:	2306      	movs	r3, #6
 80017ec:	e00c      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00a      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e008      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e004      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017fe:	2302      	movs	r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x244>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x244>
 8001806:	2300      	movs	r3, #0
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4093      	lsls	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001818:	4937      	ldr	r1, [pc, #220]	; (80018f8 <HAL_GPIO_Init+0x334>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_GPIO_Init+0x350>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800184a:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_GPIO_Init+0x350>)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_GPIO_Init+0x350>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001874:	4a27      	ldr	r2, [pc, #156]	; (8001914 <HAL_GPIO_Init+0x350>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_GPIO_Init+0x350>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800189e:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_GPIO_Init+0x350>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_GPIO_Init+0x350>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_GPIO_Init+0x350>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f47f ae78 	bne.w	80015d4 <HAL_GPIO_Init+0x10>
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000
 80018fc:	48000400 	.word	0x48000400
 8001900:	48000800 	.word	0x48000800
 8001904:	48000c00 	.word	0x48000c00
 8001908:	48001000 	.word	0x48001000
 800190c:	48001400 	.word	0x48001400
 8001910:	48001800 	.word	0x48001800
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001934:	e002      	b.n	800193c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43d9      	mvns	r1, r3
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	400b      	ands	r3, r1
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe80 	bl	80006a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e08d      	b.n	8001ada <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff f9f6 	bl	8000dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	e006      	b.n	8001a34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d108      	bne.n	8001a4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	e007      	b.n	8001a5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69d9      	ldr	r1, [r3, #28]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1a      	ldr	r2, [r3, #32]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	817b      	strh	r3, [r7, #10]
 8001af6:	460b      	mov	r3, r1
 8001af8:	813b      	strh	r3, [r7, #8]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	f040 80f9 	bne.w	8001cfe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_I2C_Mem_Write+0x34>
 8001b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0ed      	b.n	8001d00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Mem_Write+0x4e>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e0e6      	b.n	8001d00 <HAL_I2C_Mem_Write+0x21c>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b3a:	f7ff fb99 	bl	8001270 <HAL_GetTick>
 8001b3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2319      	movs	r3, #25
 8001b46:	2201      	movs	r2, #1
 8001b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f001 fd48 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0d1      	b.n	8001d00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2221      	movs	r2, #33	; 0x21
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b84:	88f8      	ldrh	r0, [r7, #6]
 8001b86:	893a      	ldrh	r2, [r7, #8]
 8001b88:	8979      	ldrh	r1, [r7, #10]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4603      	mov	r3, r0
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 ffd7 	bl	8002b48 <I2C_RequestMemoryWrite>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0a9      	b.n	8001d00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2bff      	cmp	r3, #255	; 0xff
 8001bb4:	d90e      	bls.n	8001bd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	22ff      	movs	r2, #255	; 0xff
 8001bba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	8979      	ldrh	r1, [r7, #10]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f001 fec1 	bl	8003954 <I2C_TransferConfig>
 8001bd2:	e00f      	b.n	8001bf4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	8979      	ldrh	r1, [r7, #10]
 8001be6:	2300      	movs	r3, #0
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f001 feb0 	bl	8003954 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f001 fd41 	bl	8003680 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e07b      	b.n	8001d00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d034      	beq.n	8001cac <HAL_I2C_Mem_Write+0x1c8>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d130      	bne.n	8001cac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	2200      	movs	r2, #0
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f001 fcc4 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e04d      	b.n	8001d00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2bff      	cmp	r3, #255	; 0xff
 8001c6c:	d90e      	bls.n	8001c8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	22ff      	movs	r2, #255	; 0xff
 8001c72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	8979      	ldrh	r1, [r7, #10]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f001 fe65 	bl	8003954 <I2C_TransferConfig>
 8001c8a:	e00f      	b.n	8001cac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	8979      	ldrh	r1, [r7, #10]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f001 fe54 	bl	8003954 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d19e      	bne.n	8001bf4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f001 fd27 	bl	800370e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e01a      	b.n	8001d00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_I2C_Mem_Write+0x224>)
 8001cde:	400b      	ands	r3, r1
 8001ce0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	fe00e800 	.word	0xfe00e800

08001d0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	817b      	strh	r3, [r7, #10]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	813b      	strh	r3, [r7, #8]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	f040 80fd 	bne.w	8001f2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x34>
 8001d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0f1      	b.n	8001f30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_I2C_Mem_Read+0x4e>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e0ea      	b.n	8001f30 <HAL_I2C_Mem_Read+0x224>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d62:	f7ff fa85 	bl	8001270 <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2319      	movs	r3, #25
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f001 fc34 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0d5      	b.n	8001f30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2222      	movs	r2, #34	; 0x22
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a3a      	ldr	r2, [r7, #32]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dac:	88f8      	ldrh	r0, [r7, #6]
 8001dae:	893a      	ldrh	r2, [r7, #8]
 8001db0:	8979      	ldrh	r1, [r7, #10]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 ff17 	bl	8002bf0 <I2C_RequestMemoryRead>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0ad      	b.n	8001f30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2bff      	cmp	r3, #255	; 0xff
 8001ddc:	d90e      	bls.n	8001dfc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	22ff      	movs	r2, #255	; 0xff
 8001de2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	8979      	ldrh	r1, [r7, #10]
 8001dec:	4b52      	ldr	r3, [pc, #328]	; (8001f38 <HAL_I2C_Mem_Read+0x22c>)
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f001 fdad 	bl	8003954 <I2C_TransferConfig>
 8001dfa:	e00f      	b.n	8001e1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	8979      	ldrh	r1, [r7, #10]
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_I2C_Mem_Read+0x22c>)
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f001 fd9c 	bl	8003954 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	2200      	movs	r2, #0
 8001e24:	2104      	movs	r1, #4
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f001 fbdb 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07c      	b.n	8001f30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d034      	beq.n	8001edc <HAL_I2C_Mem_Read+0x1d0>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d130      	bne.n	8001edc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	2200      	movs	r2, #0
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f001 fbac 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e04d      	b.n	8001f30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2bff      	cmp	r3, #255	; 0xff
 8001e9c:	d90e      	bls.n	8001ebc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	22ff      	movs	r2, #255	; 0xff
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	8979      	ldrh	r1, [r7, #10]
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f001 fd4d 	bl	8003954 <I2C_TransferConfig>
 8001eba:	e00f      	b.n	8001edc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	8979      	ldrh	r1, [r7, #10]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f001 fd3c 	bl	8003954 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d19a      	bne.n	8001e1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f001 fc0f 	bl	800370e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e01a      	b.n	8001f30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2220      	movs	r2, #32
 8001f00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_I2C_Mem_Read+0x230>)
 8001f0e:	400b      	ands	r3, r1
 8001f10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	80002400 	.word	0x80002400
 8001f3c:	fe00e800 	.word	0xfe00e800

08001f40 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	817b      	strh	r3, [r7, #10]
 8001f52:	460b      	mov	r3, r1
 8001f54:	813b      	strh	r3, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d166      	bne.n	8002034 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_I2C_Mem_Read_IT+0x32>
 8001f6c:	8bbb      	ldrh	r3, [r7, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e05b      	b.n	8002036 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e051      	b.n	8002036 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_I2C_Mem_Read_IT+0x60>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e04a      	b.n	8002036 <HAL_I2C_Mem_Read_IT+0xf6>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2222      	movs	r2, #34	; 0x22
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8bba      	ldrh	r2, [r7, #28]
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_I2C_Mem_Read_IT+0x100>)
 8001fce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_I2C_Mem_Read_IT+0x104>)
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001fd6:	897a      	ldrh	r2, [r7, #10]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d109      	bne.n	8001ff6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fe2:	893b      	ldrh	r3, [r7, #8]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff4:	e00b      	b.n	800200e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ff6:	893b      	ldrh	r3, [r7, #8]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002004:	893b      	ldrh	r3, [r7, #8]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_I2C_Mem_Read_IT+0x108>)
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2300      	movs	r3, #0
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f001 fc9a 	bl	8003954 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002028:	2101      	movs	r1, #1
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f001 fcc4 	bl	80039b8 <I2C_Enable_IRQ>

    return HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	e000      	b.n	8002036 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
  }
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	ffff0000 	.word	0xffff0000
 8002044:	0800213d 	.word	0x0800213d
 8002048:	80002000 	.word	0x80002000

0800204c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
  }
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
 80020dc:	4613      	mov	r3, r2
 80020de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002148:	4b8d      	ldr	r3, [pc, #564]	; (8002380 <I2C_Mem_ISR_IT+0x244>)
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <I2C_Mem_ISR_IT+0x22>
 800215a:	2302      	movs	r3, #2
 800215c:	e10c      	b.n	8002378 <I2C_Mem_ISR_IT+0x23c>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2210      	movs	r2, #16
 8002180:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f043 0204 	orr.w	r2, r3, #4
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f001 f9e5 	bl	800355e <I2C_Flush_TXDR>
 8002194:	e0dd      	b.n	8002352 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d022      	beq.n	80021e6 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01d      	beq.n	80021e6 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021e4:	e0b5      	b.n	8002352 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d02c      	beq.n	800224a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d027      	beq.n	800224a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002202:	d118      	bne.n	8002236 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002234:	e08d      	b.n	8002352 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800223e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f04f 32ff 	mov.w	r2, #4294967295
 8002246:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002248:	e083      	b.n	8002352 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b00      	cmp	r3, #0
 8002252:	d03c      	beq.n	80022ce <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800225a:	2b00      	cmp	r3, #0
 800225c:	d037      	beq.n	80022ce <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02c      	beq.n	80022c2 <I2C_Mem_ISR_IT+0x186>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	d128      	bne.n	80022c2 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d910      	bls.n	800229c <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	b299      	uxth	r1, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	b2da      	uxtb	r2, r3
 800228c:	2300      	movs	r3, #0
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f001 fb5d 	bl	8003954 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800229a:	e017      	b.n	80022cc <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	b299      	uxth	r1, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f001 fb4a 	bl	8003954 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c0:	e004      	b.n	80022cc <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80022c2:	2140      	movs	r1, #64	; 0x40
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f001 f833 	bl	8003330 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022ca:	e042      	b.n	8002352 <I2C_Mem_ISR_IT+0x216>
 80022cc:	e041      	b.n	8002352 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03c      	beq.n	8002352 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d037      	beq.n	8002352 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80022e2:	2101      	movs	r1, #1
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f001 fbeb 	bl	8003ac0 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80022ea:	2102      	movs	r1, #2
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f001 fb63 	bl	80039b8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b22      	cmp	r3, #34	; 0x22
 80022fc:	d101      	bne.n	8002302 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <I2C_Mem_ISR_IT+0x248>)
 8002300:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	2bff      	cmp	r3, #255	; 0xff
 800230a:	d910      	bls.n	800232e <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	b299      	uxth	r1, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	b2da      	uxtb	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f001 fb14 	bl	8003954 <I2C_TransferConfig>
 800232c:	e011      	b.n	8002352 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	b299      	uxth	r1, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	b2da      	uxtb	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f001 fb01 	bl	8003954 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002366:	6939      	ldr	r1, [r7, #16]
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fdb3 	bl	8002ed4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	80002000 	.word	0x80002000
 8002384:	80002400 	.word	0x80002400

08002388 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <I2C_Slave_ISR_IT+0x24>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0e1      	b.n	8002570 <I2C_Slave_ISR_IT+0x1e8>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fe4a 	bl	8003064 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d04b      	beq.n	8002472 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d046      	beq.n	8002472 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d128      	bne.n	8002440 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b28      	cmp	r3, #40	; 0x28
 80023f8:	d108      	bne.n	800240c <I2C_Slave_ISR_IT+0x84>
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002400:	d104      	bne.n	800240c <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002402:	6939      	ldr	r1, [r7, #16]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 ff3f 	bl	8003288 <I2C_ITListenCplt>
 800240a:	e031      	b.n	8002470 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b29      	cmp	r3, #41	; 0x29
 8002416:	d10e      	bne.n	8002436 <I2C_Slave_ISR_IT+0xae>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800241e:	d00a      	beq.n	8002436 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f001 f898 	bl	800355e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fcf3 	bl	8002e1a <I2C_ITSlaveSeqCplt>
 8002434:	e01c      	b.n	8002470 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2210      	movs	r2, #16
 800243c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800243e:	e08f      	b.n	8002560 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2210      	movs	r2, #16
 8002446:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f043 0204 	orr.w	r2, r3, #4
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <I2C_Slave_ISR_IT+0xda>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d17e      	bne.n	8002560 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4619      	mov	r1, r3
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 ff61 	bl	8003330 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800246e:	e077      	b.n	8002560 <I2C_Slave_ISR_IT+0x1d8>
 8002470:	e076      	b.n	8002560 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02f      	beq.n	80024dc <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02a      	beq.n	80024dc <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d018      	beq.n	80024c2 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d14b      	bne.n	8002564 <I2C_Slave_ISR_IT+0x1dc>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024d2:	d047      	beq.n	8002564 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fca0 	bl	8002e1a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80024da:	e043      	b.n	8002564 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80024f0:	6939      	ldr	r1, [r7, #16]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fbd0 	bl	8002c98 <I2C_ITAddrCplt>
 80024f8:	e035      	b.n	8002566 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d030      	beq.n	8002566 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02b      	beq.n	8002566 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d018      	beq.n	800254a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
 8002548:	e00d      	b.n	8002566 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002550:	d002      	beq.n	8002558 <I2C_Slave_ISR_IT+0x1d0>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fc5e 	bl	8002e1a <I2C_ITSlaveSeqCplt>
 800255e:	e002      	b.n	8002566 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002564:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <I2C_Master_ISR_DMA+0x1a>
 800258e:	2302      	movs	r3, #2
 8002590:	e0d9      	b.n	8002746 <I2C_Master_ISR_DMA+0x1ce>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d016      	beq.n	80025d2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d011      	beq.n	80025d2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2210      	movs	r2, #16
 80025b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f043 0204 	orr.w	r2, r3, #4
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80025c2:	2120      	movs	r1, #32
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f001 f9f7 	bl	80039b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 ffc7 	bl	800355e <I2C_Flush_TXDR>
 80025d0:	e0b4      	b.n	800273c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d071      	beq.n	80026c0 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06c      	beq.n	80026c0 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d04e      	beq.n	800269e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	2bff      	cmp	r3, #255	; 0xff
 8002616:	d906      	bls.n	8002626 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	22ff      	movs	r2, #255	; 0xff
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800261e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e010      	b.n	8002648 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002638:	d003      	beq.n	8002642 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e002      	b.n	8002648 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002646:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8a79      	ldrh	r1, [r7, #18]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f001 f97c 	bl	8003954 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b22      	cmp	r3, #34	; 0x22
 8002678:	d108      	bne.n	800268c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002688:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800268a:	e057      	b.n	800273c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800269c:	e04e      	b.n	800273c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ac:	d003      	beq.n	80026b6 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fb76 	bl	8002da0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80026b4:	e042      	b.n	800273c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80026b6:	2140      	movs	r1, #64	; 0x40
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fe39 	bl	8003330 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80026be:	e03d      	b.n	800273c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d028      	beq.n	800271c <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d023      	beq.n	800271c <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d119      	bne.n	8002712 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ec:	d025      	beq.n	800273a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f6:	d108      	bne.n	800270a <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002706:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002708:	e017      	b.n	800273a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fb48 	bl	8002da0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002710:	e013      	b.n	800273a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002712:	2140      	movs	r1, #64	; 0x40
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fe0b 	bl	8003330 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800271a:	e00e      	b.n	800273a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fbce 	bl	8002ed4 <I2C_ITMasterCplt>
 8002738:	e000      	b.n	800273c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800273a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800275c:	4b8d      	ldr	r3, [pc, #564]	; (8002994 <I2C_Mem_ISR_DMA+0x244>)
 800275e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <I2C_Mem_ISR_DMA+0x1e>
 800276a:	2302      	movs	r3, #2
 800276c:	e10e      	b.n	800298c <I2C_Mem_ISR_DMA+0x23c>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	d016      	beq.n	80027ae <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002786:	2b00      	cmp	r3, #0
 8002788:	d011      	beq.n	80027ae <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2210      	movs	r2, #16
 8002790:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f043 0204 	orr.w	r2, r3, #4
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800279e:	2120      	movs	r1, #32
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f001 f909 	bl	80039b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fed9 	bl	800355e <I2C_Flush_TXDR>
 80027ac:	e0e9      	b.n	8002982 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00e      	beq.n	80027d6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f04f 32ff 	mov.w	r2, #4294967295
 80027d2:	651a      	str	r2, [r3, #80]	; 0x50
 80027d4:	e0d5      	b.n	8002982 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05f      	beq.n	80028a0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d05a      	beq.n	80028a0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027ea:	2101      	movs	r1, #1
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f001 f967 	bl	8003ac0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80027f2:	2110      	movs	r1, #16
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f001 f8df 	bl	80039b8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d048      	beq.n	8002896 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d910      	bls.n	8002830 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	b299      	uxth	r1, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	b2da      	uxtb	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f001 f893 	bl	8003954 <I2C_TransferConfig>
 800282e:	e011      	b.n	8002854 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	b299      	uxth	r1, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	b2da      	uxtb	r2, r3
 8002846:	2300      	movs	r3, #0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f001 f880 	bl	8003954 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b22      	cmp	r3, #34	; 0x22
 8002870:	d108      	bne.n	8002884 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002880:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002882:	e07e      	b.n	8002982 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002892:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002894:	e075      	b.n	8002982 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002896:	2140      	movs	r1, #64	; 0x40
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fd49 	bl	8003330 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800289e:	e070      	b.n	8002982 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d05d      	beq.n	8002966 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d058      	beq.n	8002966 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028b4:	2101      	movs	r1, #1
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f001 f902 	bl	8003ac0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80028bc:	2110      	movs	r1, #16
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f001 f87a 	bl	80039b8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b22      	cmp	r3, #34	; 0x22
 80028ce:	d101      	bne.n	80028d4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <I2C_Mem_ISR_DMA+0x248>)
 80028d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d910      	bls.n	8002900 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	b299      	uxth	r1, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f001 f82b 	bl	8003954 <I2C_TransferConfig>
 80028fe:	e011      	b.n	8002924 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	b299      	uxth	r1, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	b2da      	uxtb	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f001 f818 	bl	8003954 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b22      	cmp	r3, #34	; 0x22
 8002940:	d108      	bne.n	8002954 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002950:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002952:	e016      	b.n	8002982 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002962:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002964:	e00d      	b.n	8002982 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 faa9 	bl	8002ed4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	80002000 	.word	0x80002000
 8002998:	80002400 	.word	0x80002400

0800299c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <I2C_Slave_ISR_DMA+0x24>
 80029bc:	2302      	movs	r3, #2
 80029be:	e0bf      	b.n	8002b40 <I2C_Slave_ISR_DMA+0x1a4>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fb40 	bl	8003064 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8095 	beq.w	8002b1a <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 808f 	beq.w	8002b1a <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d07d      	beq.n	8002b0c <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002a50:	2301      	movs	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d128      	bne.n	8002aac <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b28      	cmp	r3, #40	; 0x28
 8002a64:	d108      	bne.n	8002a78 <I2C_Slave_ISR_DMA+0xdc>
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a6c:	d104      	bne.n	8002a78 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fc09 	bl	8003288 <I2C_ITListenCplt>
 8002a76:	e048      	b.n	8002b0a <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b29      	cmp	r3, #41	; 0x29
 8002a82:	d10e      	bne.n	8002aa2 <I2C_Slave_ISR_DMA+0x106>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a8a:	d00a      	beq.n	8002aa2 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fd62 	bl	800355e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f9bd 	bl	8002e1a <I2C_ITSlaveSeqCplt>
 8002aa0:	e033      	b.n	8002b0a <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002aaa:	e034      	b.n	8002b16 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f043 0204 	orr.w	r2, r3, #4
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <I2C_Slave_ISR_DMA+0x13a>
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d11f      	bne.n	8002b16 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	2b21      	cmp	r3, #33	; 0x21
 8002ada:	d002      	beq.n	8002ae2 <I2C_Slave_ISR_DMA+0x146>
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b29      	cmp	r3, #41	; 0x29
 8002ae0:	d103      	bne.n	8002aea <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2221      	movs	r2, #33	; 0x21
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae8:	e008      	b.n	8002afc <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b22      	cmp	r3, #34	; 0x22
 8002aee:	d002      	beq.n	8002af6 <I2C_Slave_ISR_DMA+0x15a>
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b2a      	cmp	r3, #42	; 0x2a
 8002af4:	d102      	bne.n	8002afc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2222      	movs	r2, #34	; 0x22
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	4619      	mov	r1, r3
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fc14 	bl	8003330 <I2C_ITError>
      if (treatdmanack == 1U)
 8002b08:	e005      	b.n	8002b16 <I2C_Slave_ISR_DMA+0x17a>
 8002b0a:	e004      	b.n	8002b16 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2210      	movs	r2, #16
 8002b12:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b14:	e00f      	b.n	8002b36 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8002b16:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b18:	e00d      	b.n	8002b36 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f8b1 	bl	8002c98 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	817b      	strh	r3, [r7, #10]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	813b      	strh	r3, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	8979      	ldrh	r1, [r7, #10]
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <I2C_RequestMemoryWrite+0xa4>)
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 feef 	bl	8003954 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fd80 	bl	8003680 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e02c      	b.n	8002be4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b90:	893b      	ldrh	r3, [r7, #8]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
 8002b9a:	e015      	b.n	8002bc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	69b9      	ldr	r1, [r7, #24]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fd66 	bl	8003680 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e012      	b.n	8002be4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bbe:	893b      	ldrh	r3, [r7, #8]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fd05 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	80002000 	.word	0x80002000

08002bf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	460b      	mov	r3, r1
 8002c04:	813b      	strh	r3, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	8979      	ldrh	r1, [r7, #10]
 8002c10:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <I2C_RequestMemoryRead+0xa4>)
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2300      	movs	r3, #0
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fe9c 	bl	8003954 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	69b9      	ldr	r1, [r7, #24]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fd2d 	bl	8003680 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e02c      	b.n	8002c8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c36:	893b      	ldrh	r3, [r7, #8]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c40:	e015      	b.n	8002c6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c42:	893b      	ldrh	r3, [r7, #8]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fd13 	bl	8003680 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e012      	b.n	8002c8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c64:	893b      	ldrh	r3, [r7, #8]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fcb2 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	80002000 	.word	0x80002000

08002c98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cae:	2b28      	cmp	r3, #40	; 0x28
 8002cb0:	d16a      	bne.n	8002d88 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002cd0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cde:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002cec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d138      	bne.n	8002d68 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	09db      	lsrs	r3, r3, #7
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	89bb      	ldrh	r3, [r7, #12]
 8002cfe:	4053      	eors	r3, r2
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f003 0306 	and.w	r3, r3, #6
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11c      	bne.n	8002d44 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d13b      	bne.n	8002d98 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d36:	89ba      	ldrh	r2, [r7, #12]
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff f9c7 	bl	80020d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d42:	e029      	b.n	8002d98 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d44:	893b      	ldrh	r3, [r7, #8]
 8002d46:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 feb7 	bl	8003ac0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d5a:	89ba      	ldrh	r2, [r7, #12]
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff f9b5 	bl	80020d0 <HAL_I2C_AddrCallback>
}
 8002d66:	e017      	b.n	8002d98 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fea7 	bl	8003ac0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d7a:	89ba      	ldrh	r2, [r7, #12]
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff f9a5 	bl	80020d0 <HAL_I2C_AddrCallback>
}
 8002d86:	e007      	b.n	8002d98 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b21      	cmp	r3, #33	; 0x21
 8002dba:	d115      	bne.n	8002de8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2211      	movs	r2, #17
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fe74 	bl	8003ac0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff f94d 	bl	8002080 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002de6:	e014      	b.n	8002e12 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2212      	movs	r2, #18
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fe5e 	bl	8003ac0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff f941 	bl	8002094 <HAL_I2C_MasterRxCpltCallback>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	e00c      	b.n	8002e68 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e66:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b29      	cmp	r3, #41	; 0x29
 8002e72:	d112      	bne.n	8002e9a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2228      	movs	r2, #40	; 0x28
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2221      	movs	r2, #33	; 0x21
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e82:	2101      	movs	r1, #1
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fe1b 	bl	8003ac0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff f908 	bl	80020a8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e98:	e017      	b.n	8002eca <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ea4:	d111      	bne.n	8002eca <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2228      	movs	r2, #40	; 0x28
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2222      	movs	r2, #34	; 0x22
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fe02 	bl	8003ac0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff f8f9 	bl	80020bc <HAL_I2C_SlaveRxCpltCallback>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b21      	cmp	r3, #33	; 0x21
 8002ef4:	d107      	bne.n	8002f06 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fde1 	bl	8003ac0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2211      	movs	r2, #17
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
 8002f04:	e00c      	b.n	8002f20 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b22      	cmp	r3, #34	; 0x22
 8002f10:	d106      	bne.n	8002f20 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f12:	2102      	movs	r1, #2
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fdd3 	bl	8003ac0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2212      	movs	r2, #18
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	; (800305c <I2C_ITMasterCplt+0x188>)
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a49      	ldr	r2, [pc, #292]	; (8003060 <I2C_ITMasterCplt+0x18c>)
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f043 0204 	orr.w	r2, r3, #4
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b60      	cmp	r3, #96	; 0x60
 8002f64:	d10a      	bne.n	8002f7c <I2C_ITMasterCplt+0xa8>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 faee 	bl	800355e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b60      	cmp	r3, #96	; 0x60
 8002f92:	d002      	beq.n	8002f9a <I2C_ITMasterCplt+0xc6>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d006      	beq.n	8002fa8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f9c5 	bl	8003330 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002fa6:	e054      	b.n	8003052 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b21      	cmp	r3, #33	; 0x21
 8002fb2:	d124      	bne.n	8002ffe <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d10b      	bne.n	8002fe6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff f88e 	bl	8002100 <HAL_I2C_MemTxCpltCallback>
}
 8002fe4:	e035      	b.n	8003052 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff f842 	bl	8002080 <HAL_I2C_MasterTxCpltCallback>
}
 8002ffc:	e029      	b.n	8003052 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b22      	cmp	r3, #34	; 0x22
 8003008:	d123      	bne.n	8003052 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d10b      	bne.n	800303c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fd faf7 	bl	8000628 <HAL_I2C_MemRxCpltCallback>
}
 800303a:	e00a      	b.n	8003052 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff f821 	bl	8002094 <HAL_I2C_MasterRxCpltCallback>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	fe00e800 	.word	0xfe00e800
 8003060:	ffff0000 	.word	0xffff0000

08003064 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003080:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b21      	cmp	r3, #33	; 0x21
 800308e:	d002      	beq.n	8003096 <I2C_ITSlaveCplt+0x32>
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b29      	cmp	r3, #41	; 0x29
 8003094:	d108      	bne.n	80030a8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003096:	f248 0101 	movw	r1, #32769	; 0x8001
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fd10 	bl	8003ac0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2221      	movs	r2, #33	; 0x21
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
 80030a6:	e019      	b.n	80030dc <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b22      	cmp	r3, #34	; 0x22
 80030ac:	d002      	beq.n	80030b4 <I2C_ITSlaveCplt+0x50>
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b2a      	cmp	r3, #42	; 0x2a
 80030b2:	d108      	bne.n	80030c6 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80030b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fd01 	bl	8003ac0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2222      	movs	r2, #34	; 0x22
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
 80030c4:	e00a      	b.n	80030dc <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	2b28      	cmp	r3, #40	; 0x28
 80030ca:	d107      	bne.n	80030dc <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80030cc:	f248 0103 	movw	r1, #32771	; 0x8003
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fcf5 	bl	8003ac0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b62      	ldr	r3, [pc, #392]	; (8003280 <I2C_ITSlaveCplt+0x21c>)
 80030f8:	400b      	ands	r3, r1
 80030fa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fa2e 	bl	800355e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d013      	beq.n	8003134 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800311a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01f      	beq.n	8003164 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	b29a      	uxth	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003132:	e017      	b.n	8003164 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d012      	beq.n	8003164 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800314c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d006      	beq.n	8003164 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	b29a      	uxth	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	4619      	mov	r1, r3
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8a4 	bl	8003330 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b28      	cmp	r3, #40	; 0x28
 80031f2:	d141      	bne.n	8003278 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031f4:	6979      	ldr	r1, [r7, #20]
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f846 	bl	8003288 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031fc:	e03c      	b.n	8003278 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003206:	d014      	beq.n	8003232 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fe06 	bl	8002e1a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <I2C_ITSlaveCplt+0x220>)
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe ff5e 	bl	80020ec <HAL_I2C_ListenCpltCallback>
}
 8003230:	e022      	b.n	8003278 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b22      	cmp	r3, #34	; 0x22
 800323c:	d10e      	bne.n	800325c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fe ff31 	bl	80020bc <HAL_I2C_SlaveRxCpltCallback>
}
 800325a:	e00d      	b.n	8003278 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe ff18 	bl	80020a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	fe00e800 	.word	0xfe00e800
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <I2C_ITListenCplt+0xa4>)
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d022      	beq.n	8003304 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d012      	beq.n	8003304 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003304:	f248 0103 	movw	r1, #32771	; 0x8003
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fbd9 	bl	8003ac0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2210      	movs	r2, #16
 8003314:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fee4 	bl	80020ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	ffff0000 	.word	0xffff0000

08003330 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003340:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a6d      	ldr	r2, [pc, #436]	; (8003504 <I2C_ITError+0x1d4>)
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	2b28      	cmp	r3, #40	; 0x28
 8003366:	d005      	beq.n	8003374 <I2C_ITError+0x44>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b29      	cmp	r3, #41	; 0x29
 800336c:	d002      	beq.n	8003374 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b2a      	cmp	r3, #42	; 0x2a
 8003372:	d10b      	bne.n	800338c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003374:	2103      	movs	r1, #3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fba2 	bl	8003ac0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2228      	movs	r2, #40	; 0x28
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a60      	ldr	r2, [pc, #384]	; (8003508 <I2C_ITError+0x1d8>)
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
 800338a:	e030      	b.n	80033ee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800338c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fb95 	bl	8003ac0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8e1 	bl	800355e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b60      	cmp	r3, #96	; 0x60
 80033a6:	d01f      	beq.n	80033e8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d114      	bne.n	80033e8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d109      	bne.n	80033e0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2210      	movs	r2, #16
 80033d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2220      	movs	r2, #32
 80033e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d039      	beq.n	8003470 <I2C_ITError+0x140>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b11      	cmp	r3, #17
 8003400:	d002      	beq.n	8003408 <I2C_ITError+0xd8>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b21      	cmp	r3, #33	; 0x21
 8003406:	d133      	bne.n	8003470 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003416:	d107      	bne.n	8003428 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003426:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	4618      	mov	r0, r3
 800342e:	f7fe f8bb 	bl	80015a8 <HAL_DMA_GetState>
 8003432:	4603      	mov	r3, r0
 8003434:	2b01      	cmp	r3, #1
 8003436:	d017      	beq.n	8003468 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	4a33      	ldr	r2, [pc, #204]	; (800350c <I2C_ITError+0x1dc>)
 800343e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe f86a 	bl	8001526 <HAL_DMA_Abort_IT>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d04d      	beq.n	80034f4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003462:	4610      	mov	r0, r2
 8003464:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003466:	e045      	b.n	80034f4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f851 	bl	8003510 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800346e:	e041      	b.n	80034f4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d039      	beq.n	80034ec <I2C_ITError+0x1bc>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b12      	cmp	r3, #18
 800347c:	d002      	beq.n	8003484 <I2C_ITError+0x154>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b22      	cmp	r3, #34	; 0x22
 8003482:	d133      	bne.n	80034ec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003492:	d107      	bne.n	80034a4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe f87d 	bl	80015a8 <HAL_DMA_GetState>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d017      	beq.n	80034e4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <I2C_ITError+0x1dc>)
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe f82c 	bl	8001526 <HAL_DMA_Abort_IT>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d011      	beq.n	80034f8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034de:	4610      	mov	r0, r2
 80034e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034e2:	e009      	b.n	80034f8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f813 	bl	8003510 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ea:	e005      	b.n	80034f8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f80f 	bl	8003510 <I2C_TreatErrorCallback>
  }
}
 80034f2:	e002      	b.n	80034fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f8:	bf00      	nop
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	ffff0000 	.word	0xffff0000
 8003508:	08002389 	.word	0x08002389
 800350c:	080035a7 	.word	0x080035a7

08003510 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b60      	cmp	r3, #96	; 0x60
 8003522:	d10e      	bne.n	8003542 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe fdf4 	bl	8002128 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003540:	e009      	b.n	8003556 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fe fddf 	bl	8002114 <HAL_I2C_ErrorCallback>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b02      	cmp	r3, #2
 8003572:	d103      	bne.n	800357c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d007      	beq.n	800359a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	619a      	str	r2, [r3, #24]
  }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	2200      	movs	r2, #0
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d0:	2200      	movs	r2, #0
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff ff9b 	bl	8003510 <I2C_TreatErrorCallback>
}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f2:	e031      	b.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d02d      	beq.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fc:	f7fd fe38 	bl	8001270 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d122      	bne.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	429a      	cmp	r2, r3
 800362e:	d113      	bne.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f043 0220 	orr.w	r2, r3, #32
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e00f      	b.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	429a      	cmp	r2, r3
 8003674:	d0be      	beq.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800368c:	e033      	b.n	80036f6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f87e 	bl	8003794 <I2C_IsErrorOccurred>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e031      	b.n	8003706 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d025      	beq.n	80036f6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fd fde1 	bl	8001270 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11a      	bne.n	80036f6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d013      	beq.n	80036f6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e007      	b.n	8003706 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d1c4      	bne.n	800368e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800371a:	e02f      	b.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f837 	bl	8003794 <I2C_IsErrorOccurred>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e02d      	b.n	800378c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003730:	f7fd fd9e 	bl	8001270 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d302      	bcc.n	8003746 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11a      	bne.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b20      	cmp	r3, #32
 8003752:	d013      	beq.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e007      	b.n	800378c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d1c8      	bne.n	800371c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d068      	beq.n	8003892 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2210      	movs	r2, #16
 80037c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037c8:	e049      	b.n	800385e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d045      	beq.n	800385e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7fd fd4d 	bl	8001270 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <I2C_IsErrorOccurred+0x54>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d13a      	bne.n	800385e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800380a:	d121      	bne.n	8003850 <I2C_IsErrorOccurred+0xbc>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003812:	d01d      	beq.n	8003850 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	2b20      	cmp	r3, #32
 8003818:	d01a      	beq.n	8003850 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003828:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800382a:	f7fd fd21 	bl	8001270 <HAL_GetTick>
 800382e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003830:	e00e      	b.n	8003850 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003832:	f7fd fd1d 	bl	8001270 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b19      	cmp	r3, #25
 800383e:	d907      	bls.n	8003850 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f043 0320 	orr.w	r3, r3, #32
 8003846:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800384e:	e006      	b.n	800385e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d1e9      	bne.n	8003832 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b20      	cmp	r3, #32
 800386a:	d003      	beq.n	8003874 <I2C_IsErrorOccurred+0xe0>
 800386c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0aa      	beq.n	80037ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003878:	2b00      	cmp	r3, #0
 800387a:	d103      	bne.n	8003884 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2220      	movs	r2, #32
 8003882:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f043 0304 	orr.w	r3, r3, #4
 800388a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f043 0308 	orr.w	r3, r3, #8
 80038cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f043 0302 	orr.w	r3, r3, #2
 80038ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01c      	beq.n	8003942 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fe28 	bl	800355e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <I2C_IsErrorOccurred+0x1bc>)
 800391a:	400b      	ands	r3, r1
 800391c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003946:	4618      	mov	r0, r3
 8003948:	3728      	adds	r7, #40	; 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	fe00e800 	.word	0xfe00e800

08003954 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	817b      	strh	r3, [r7, #10]
 8003962:	4613      	mov	r3, r2
 8003964:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003966:	897b      	ldrh	r3, [r7, #10]
 8003968:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800396c:	7a7b      	ldrb	r3, [r7, #9]
 800396e:	041b      	lsls	r3, r3, #16
 8003970:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003974:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	4313      	orrs	r3, r2
 800397e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003982:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	0d5b      	lsrs	r3, r3, #21
 800398e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <I2C_TransferConfig+0x60>)
 8003994:	430b      	orrs	r3, r1
 8003996:	43db      	mvns	r3, r3
 8003998:	ea02 0103 	and.w	r1, r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	03ff63ff 	.word	0x03ff63ff

080039b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <I2C_Enable_IRQ+0xfc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d032      	beq.n	8003a38 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80039d6:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <I2C_Enable_IRQ+0x100>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d02d      	beq.n	8003a38 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039e0:	4a36      	ldr	r2, [pc, #216]	; (8003abc <I2C_Enable_IRQ+0x104>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d028      	beq.n	8003a38 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da03      	bge.n	80039f6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039f4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a06:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a08:	887b      	ldrh	r3, [r7, #2]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d103      	bne.n	8003a28 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d133      	bne.n	8003a96 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f043 0320 	orr.w	r3, r3, #32
 8003a34:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a36:	e02e      	b.n	8003a96 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da03      	bge.n	8003a48 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a46:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a58:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d103      	bne.n	8003a7a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d103      	bne.n	8003a88 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d103      	bne.n	8003a96 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6819      	ldr	r1, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	08002579 	.word	0x08002579
 8003ab8:	0800299d 	.word	0x0800299d
 8003abc:	08002751 	.word	0x08002751

08003ac0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00f      	beq.n	8003afa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ae0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aee:	2b28      	cmp	r3, #40	; 0x28
 8003af0:	d003      	beq.n	8003afa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003af8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00f      	beq.n	8003b24 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b0a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b18:	2b28      	cmp	r3, #40	; 0x28
 8003b1a:	d003      	beq.n	8003b24 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b22:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da03      	bge.n	8003b34 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b34:	887b      	ldrh	r3, [r7, #2]
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d103      	bne.n	8003b42 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b42:	887b      	ldrh	r3, [r7, #2]
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d103      	bne.n	8003b50 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f043 0320 	orr.w	r3, r3, #32
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b50:	887b      	ldrh	r3, [r7, #2]
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d103      	bne.n	8003b5e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43da      	mvns	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d138      	bne.n	8003c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e032      	b.n	8003c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d139      	bne.n	8003c9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e033      	b.n	8003c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2224      	movs	r2, #36	; 0x24
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40007000 	.word	0x40007000

08003cc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd6:	d130      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cd8:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce4:	d038      	beq.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cee:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2232      	movs	r2, #50	; 0x32
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0c9b      	lsrs	r3, r3, #18
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0c:	e002      	b.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d102      	bne.n	8003d28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f2      	bne.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d34:	d110      	bne.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e00f      	b.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d46:	d007      	beq.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d50:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	20000004 	.word	0x20000004
 8003d70:	431bde83 	.word	0x431bde83

08003d74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e3ca      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d86:	4b97      	ldr	r3, [pc, #604]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d90:	4b94      	ldr	r3, [pc, #592]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80e4 	beq.w	8003f70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <HAL_RCC_OscConfig+0x4a>
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	f040 808b 	bne.w	8003ecc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	f040 8087 	bne.w	8003ecc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dbe:	4b89      	ldr	r3, [pc, #548]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e3a2      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1a      	ldr	r2, [r3, #32]
 8003dda:	4b82      	ldr	r3, [pc, #520]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_RCC_OscConfig+0x7c>
 8003de6:	4b7f      	ldr	r3, [pc, #508]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dee:	e005      	b.n	8003dfc <HAL_RCC_OscConfig+0x88>
 8003df0:	4b7c      	ldr	r3, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d223      	bcs.n	8003e48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fd55 	bl	80048b4 <RCC_SetFlashLatencyFromMSIRange>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e383      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e14:	4b73      	ldr	r3, [pc, #460]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a72      	ldr	r2, [pc, #456]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	f043 0308 	orr.w	r3, r3, #8
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b70      	ldr	r3, [pc, #448]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	496d      	ldr	r1, [pc, #436]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e32:	4b6c      	ldr	r3, [pc, #432]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	4968      	ldr	r1, [pc, #416]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
 8003e46:	e025      	b.n	8003e94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e48:	4b66      	ldr	r3, [pc, #408]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a65      	ldr	r2, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	f043 0308 	orr.w	r3, r3, #8
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4960      	ldr	r1, [pc, #384]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	495b      	ldr	r1, [pc, #364]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fd15 	bl	80048b4 <RCC_SetFlashLatencyFromMSIRange>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e343      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e94:	f000 fc4a 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b52      	ldr	r3, [pc, #328]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	4950      	ldr	r1, [pc, #320]	; (8003fe8 <HAL_RCC_OscConfig+0x274>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	4a4e      	ldr	r2, [pc, #312]	; (8003fec <HAL_RCC_OscConfig+0x278>)
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003eb4:	4b4e      	ldr	r3, [pc, #312]	; (8003ff0 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd f989 	bl	80011d0 <HAL_InitTick>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d052      	beq.n	8003f6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	e327      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d032      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ed4:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a42      	ldr	r2, [pc, #264]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd f9c6 	bl	8001270 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ee8:	f7fd f9c2 	bl	8001270 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e310      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003efa:	4b3a      	ldr	r3, [pc, #232]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f06:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a36      	ldr	r2, [pc, #216]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4931      	ldr	r1, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f24:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	492c      	ldr	r1, [pc, #176]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
 8003f38:	e01a      	b.n	8003f70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f46:	f7fd f993 	bl	8001270 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f4e:	f7fd f98f 	bl	8001270 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e2dd      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f60:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x1da>
 8003f6c:	e000      	b.n	8003f70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d074      	beq.n	8004066 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d005      	beq.n	8003f8e <HAL_RCC_OscConfig+0x21a>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d10e      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d064      	beq.n	8004064 <HAL_RCC_OscConfig+0x2f0>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d160      	bne.n	8004064 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e2ba      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x24a>
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e026      	b.n	800400c <HAL_RCC_OscConfig+0x298>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc6:	d115      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x280>
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a02      	ldr	r2, [pc, #8]	; (8003fe4 <HAL_RCC_OscConfig+0x270>)
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	e014      	b.n	800400c <HAL_RCC_OscConfig+0x298>
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08007e54 	.word	0x08007e54
 8003fec:	20000004 	.word	0x20000004
 8003ff0:	20000008 	.word	0x20000008
 8003ff4:	4ba0      	ldr	r3, [pc, #640]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a9f      	ldr	r2, [pc, #636]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b9d      	ldr	r3, [pc, #628]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a9c      	ldr	r2, [pc, #624]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd f92c 	bl	8001270 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fd f928 	bl	8001270 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e276      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402e:	4b92      	ldr	r3, [pc, #584]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x2a8>
 800403a:	e014      	b.n	8004066 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd f918 	bl	8001270 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fd f914 	bl	8001270 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e262      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x2d0>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d060      	beq.n	8004134 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d005      	beq.n	8004084 <HAL_RCC_OscConfig+0x310>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d119      	bne.n	80040b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d116      	bne.n	80040b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004084:	4b7c      	ldr	r3, [pc, #496]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RCC_OscConfig+0x328>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e23f      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409c:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	4973      	ldr	r1, [pc, #460]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b0:	e040      	b.n	8004134 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d023      	beq.n	8004102 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ba:	4b6f      	ldr	r3, [pc, #444]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6e      	ldr	r2, [pc, #440]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd f8d3 	bl	8001270 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fd f8cf 	bl	8001270 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e21d      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e0:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b62      	ldr	r3, [pc, #392]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	495f      	ldr	r1, [pc, #380]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	e018      	b.n	8004134 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004102:	4b5d      	ldr	r3, [pc, #372]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a5c      	ldr	r2, [pc, #368]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fd f8af 	bl	8001270 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004116:	f7fd f8ab 	bl	8001270 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e1f9      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004128:	4b53      	ldr	r3, [pc, #332]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d03c      	beq.n	80041ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01c      	beq.n	8004182 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004148:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414e:	4a4a      	ldr	r2, [pc, #296]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd f88a 	bl	8001270 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004160:	f7fd f886 	bl	8001270 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1d4      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ef      	beq.n	8004160 <HAL_RCC_OscConfig+0x3ec>
 8004180:	e01b      	b.n	80041ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004182:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004188:	4a3b      	ldr	r2, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 800418a:	f023 0301 	bic.w	r3, r3, #1
 800418e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004192:	f7fd f86d 	bl	8001270 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800419a:	f7fd f869 	bl	8001270 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e1b7      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ac:	4b32      	ldr	r3, [pc, #200]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ef      	bne.n	800419a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80a6 	beq.w	8004314 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10d      	bne.n	80041f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	4a26      	ldr	r2, [pc, #152]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e2:	6593      	str	r3, [r2, #88]	; 0x58
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f0:	2301      	movs	r3, #1
 80041f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_RCC_OscConfig+0x508>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d118      	bne.n	8004232 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_RCC_OscConfig+0x508>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1d      	ldr	r2, [pc, #116]	; (800427c <HAL_RCC_OscConfig+0x508>)
 8004206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420c:	f7fd f830 	bl	8001270 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004214:	f7fd f82c 	bl	8001270 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e17a      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_RCC_OscConfig+0x508>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d108      	bne.n	800424c <HAL_RCC_OscConfig+0x4d8>
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004240:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800424a:	e029      	b.n	80042a0 <HAL_RCC_OscConfig+0x52c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b05      	cmp	r3, #5
 8004252:	d115      	bne.n	8004280 <HAL_RCC_OscConfig+0x50c>
 8004254:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	4a07      	ldr	r2, [pc, #28]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 800425c:	f043 0304 	orr.w	r3, r3, #4
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	4a03      	ldr	r2, [pc, #12]	; (8004278 <HAL_RCC_OscConfig+0x504>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004274:	e014      	b.n	80042a0 <HAL_RCC_OscConfig+0x52c>
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	40007000 	.word	0x40007000
 8004280:	4b9c      	ldr	r3, [pc, #624]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	4a9b      	ldr	r2, [pc, #620]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004290:	4b98      	ldr	r3, [pc, #608]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	4a97      	ldr	r2, [pc, #604]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d016      	beq.n	80042d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fc ffe2 	bl	8001270 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fc ffde 	bl	8001270 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e12a      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c6:	4b8b      	ldr	r3, [pc, #556]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ed      	beq.n	80042b0 <HAL_RCC_OscConfig+0x53c>
 80042d4:	e015      	b.n	8004302 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fc ffcb 	bl	8001270 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fc ffc7 	bl	8001270 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e113      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f4:	4b7f      	ldr	r3, [pc, #508]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1ed      	bne.n	80042de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004302:	7ffb      	ldrb	r3, [r7, #31]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b7a      	ldr	r3, [pc, #488]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	4a79      	ldr	r2, [pc, #484]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800430e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004312:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80fe 	beq.w	800451a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	2b02      	cmp	r3, #2
 8004324:	f040 80d0 	bne.w	80044c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004328:	4b72      	ldr	r3, [pc, #456]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0203 	and.w	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d130      	bne.n	800439e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	3b01      	subs	r3, #1
 8004348:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800434a:	429a      	cmp	r2, r3
 800434c:	d127      	bne.n	800439e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d11f      	bne.n	800439e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004368:	2a07      	cmp	r2, #7
 800436a:	bf14      	ite	ne
 800436c:	2201      	movne	r2, #1
 800436e:	2200      	moveq	r2, #0
 8004370:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004372:	4293      	cmp	r3, r2
 8004374:	d113      	bne.n	800439e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d109      	bne.n	800439e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	3b01      	subs	r3, #1
 8004398:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d06e      	beq.n	800447c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	d069      	beq.n	8004478 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043a4:	4b53      	ldr	r3, [pc, #332]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d105      	bne.n	80043bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043b0:	4b50      	ldr	r3, [pc, #320]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0ad      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043c0:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a4b      	ldr	r2, [pc, #300]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043cc:	f7fc ff50 	bl	8001270 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fc ff4c 	bl	8001270 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e09a      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e6:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f2:	4b40      	ldr	r3, [pc, #256]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	4b40      	ldr	r3, [pc, #256]	; (80044f8 <HAL_RCC_OscConfig+0x784>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004402:	3a01      	subs	r2, #1
 8004404:	0112      	lsls	r2, r2, #4
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800440c:	0212      	lsls	r2, r2, #8
 800440e:	4311      	orrs	r1, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004414:	0852      	lsrs	r2, r2, #1
 8004416:	3a01      	subs	r2, #1
 8004418:	0552      	lsls	r2, r2, #21
 800441a:	4311      	orrs	r1, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004420:	0852      	lsrs	r2, r2, #1
 8004422:	3a01      	subs	r2, #1
 8004424:	0652      	lsls	r2, r2, #25
 8004426:	4311      	orrs	r1, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800442c:	0912      	lsrs	r2, r2, #4
 800442e:	0452      	lsls	r2, r2, #17
 8004430:	430a      	orrs	r2, r1
 8004432:	4930      	ldr	r1, [pc, #192]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 8004434:	4313      	orrs	r3, r2
 8004436:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004438:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2d      	ldr	r2, [pc, #180]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800443e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004442:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4a2a      	ldr	r2, [pc, #168]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800444a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800444e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004450:	f7fc ff0e 	bl	8001270 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004458:	f7fc ff0a 	bl	8001270 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e058      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004476:	e050      	b.n	800451a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e04f      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d148      	bne.n	800451a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800448e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004492:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004494:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044a0:	f7fc fee6 	bl	8001270 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a8:	f7fc fee2 	bl	8001270 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e030      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ba:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x734>
 80044c6:	e028      	b.n	800451a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d023      	beq.n	8004516 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <HAL_RCC_OscConfig+0x780>)
 80044d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044da:	f7fc fec9 	bl	8001270 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e0:	e00c      	b.n	80044fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e2:	f7fc fec5 	bl	8001270 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d905      	bls.n	80044fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e013      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
 80044f4:	40021000 	.word	0x40021000
 80044f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCC_OscConfig+0x7b0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ec      	bne.n	80044e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_RCC_OscConfig+0x7b0>)
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	4905      	ldr	r1, [pc, #20]	; (8004524 <HAL_RCC_OscConfig+0x7b0>)
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_RCC_OscConfig+0x7b4>)
 8004510:	4013      	ands	r3, r2
 8004512:	60cb      	str	r3, [r1, #12]
 8004514:	e001      	b.n	800451a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	feeefffc 	.word	0xfeeefffc

0800452c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0e7      	b.n	8004710 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b75      	ldr	r3, [pc, #468]	; (8004718 <HAL_RCC_ClockConfig+0x1ec>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d910      	bls.n	8004570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b72      	ldr	r3, [pc, #456]	; (8004718 <HAL_RCC_ClockConfig+0x1ec>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 0207 	bic.w	r2, r3, #7
 8004556:	4970      	ldr	r1, [pc, #448]	; (8004718 <HAL_RCC_ClockConfig+0x1ec>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b6e      	ldr	r3, [pc, #440]	; (8004718 <HAL_RCC_ClockConfig+0x1ec>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0cf      	b.n	8004710 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b66      	ldr	r3, [pc, #408]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004588:	429a      	cmp	r2, r3
 800458a:	d908      	bls.n	800459e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800458c:	4b63      	ldr	r3, [pc, #396]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4960      	ldr	r1, [pc, #384]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d04c      	beq.n	8004644 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b2:	4b5a      	ldr	r3, [pc, #360]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d121      	bne.n	8004602 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0a6      	b.n	8004710 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ca:	4b54      	ldr	r3, [pc, #336]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d115      	bne.n	8004602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e09a      	b.n	8004710 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e2:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e08e      	b.n	8004710 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f2:	4b4a      	ldr	r3, [pc, #296]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e086      	b.n	8004710 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b46      	ldr	r3, [pc, #280]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4943      	ldr	r1, [pc, #268]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004614:	f7fc fe2c 	bl	8001270 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fc fe28 	bl	8001270 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e06e      	b.n	8004710 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b3a      	ldr	r3, [pc, #232]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d010      	beq.n	8004672 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465c:	429a      	cmp	r2, r3
 800465e:	d208      	bcs.n	8004672 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004660:	4b2e      	ldr	r3, [pc, #184]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	492b      	ldr	r1, [pc, #172]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004672:	4b29      	ldr	r3, [pc, #164]	; (8004718 <HAL_RCC_ClockConfig+0x1ec>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d210      	bcs.n	80046a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <HAL_RCC_ClockConfig+0x1ec>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 0207 	bic.w	r2, r3, #7
 8004688:	4923      	ldr	r1, [pc, #140]	; (8004718 <HAL_RCC_ClockConfig+0x1ec>)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004690:	4b21      	ldr	r3, [pc, #132]	; (8004718 <HAL_RCC_ClockConfig+0x1ec>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d001      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e036      	b.n	8004710 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4918      	ldr	r1, [pc, #96]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046cc:	4b13      	ldr	r3, [pc, #76]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4910      	ldr	r1, [pc, #64]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046e0:	f000 f824 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_RCC_ClockConfig+0x1f0>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	490b      	ldr	r1, [pc, #44]	; (8004720 <HAL_RCC_ClockConfig+0x1f4>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
 80046fc:	4a09      	ldr	r2, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x1f8>)
 80046fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_ClockConfig+0x1fc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7fc fd63 	bl	80011d0 <HAL_InitTick>
 800470a:	4603      	mov	r3, r0
 800470c:	72fb      	strb	r3, [r7, #11]

  return status;
 800470e:	7afb      	ldrb	r3, [r7, #11]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40022000 	.word	0x40022000
 800471c:	40021000 	.word	0x40021000
 8004720:	08007e54 	.word	0x08007e54
 8004724:	20000004 	.word	0x20000004
 8004728:	20000008 	.word	0x20000008

0800472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	2300      	movs	r3, #0
 8004738:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800473a:	4b3e      	ldr	r3, [pc, #248]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004744:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x34>
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b0c      	cmp	r3, #12
 8004758:	d121      	bne.n	800479e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d11e      	bne.n	800479e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004760:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800476c:	4b31      	ldr	r3, [pc, #196]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 800476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e005      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800477c:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004788:	4a2b      	ldr	r2, [pc, #172]	; (8004838 <HAL_RCC_GetSysClockFreq+0x10c>)
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004790:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10d      	bne.n	80047b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800479c:	e00a      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d102      	bne.n	80047aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047a4:	4b25      	ldr	r3, [pc, #148]	; (800483c <HAL_RCC_GetSysClockFreq+0x110>)
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	e004      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047b0:	4b23      	ldr	r3, [pc, #140]	; (8004840 <HAL_RCC_GetSysClockFreq+0x114>)
 80047b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d134      	bne.n	8004824 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d003      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0xac>
 80047d0:	e005      	b.n	80047de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <HAL_RCC_GetSysClockFreq+0x110>)
 80047d4:	617b      	str	r3, [r7, #20]
      break;
 80047d6:	e005      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_RCC_GetSysClockFreq+0x114>)
 80047da:	617b      	str	r3, [r7, #20]
      break;
 80047dc:	e002      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	617b      	str	r3, [r7, #20]
      break;
 80047e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047e4:	4b13      	ldr	r3, [pc, #76]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	3301      	adds	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	fb03 f202 	mul.w	r2, r3, r2
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_RCC_GetSysClockFreq+0x108>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	0e5b      	lsrs	r3, r3, #25
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	3301      	adds	r3, #1
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004824:	69bb      	ldr	r3, [r7, #24]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3724      	adds	r7, #36	; 0x24
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000
 8004838:	08007e6c 	.word	0x08007e6c
 800483c:	00f42400 	.word	0x00f42400
 8004840:	007a1200 	.word	0x007a1200

08004844 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b03      	ldr	r3, [pc, #12]	; (8004858 <HAL_RCC_GetHCLKFreq+0x14>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000004 	.word	0x20000004

0800485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004860:	f7ff fff0 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4904      	ldr	r1, [pc, #16]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	08007e64 	.word	0x08007e64

08004888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800488c:	f7ff ffda 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0adb      	lsrs	r3, r3, #11
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4904      	ldr	r1, [pc, #16]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	08007e64 	.word	0x08007e64

080048b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048c0:	4b2a      	ldr	r3, [pc, #168]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048cc:	f7ff f9ee 	bl	8003cac <HAL_PWREx_GetVoltageRange>
 80048d0:	6178      	str	r0, [r7, #20]
 80048d2:	e014      	b.n	80048fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	4a24      	ldr	r2, [pc, #144]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	6593      	str	r3, [r2, #88]	; 0x58
 80048e0:	4b22      	ldr	r3, [pc, #136]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048ec:	f7ff f9de 	bl	8003cac <HAL_PWREx_GetVoltageRange>
 80048f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048f2:	4b1e      	ldr	r3, [pc, #120]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	4a1d      	ldr	r2, [pc, #116]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004904:	d10b      	bne.n	800491e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d919      	bls.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2ba0      	cmp	r3, #160	; 0xa0
 8004910:	d902      	bls.n	8004918 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004912:	2302      	movs	r3, #2
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	e013      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e010      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d902      	bls.n	800492a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004924:	2303      	movs	r3, #3
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	e00a      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d102      	bne.n	8004936 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004930:	2302      	movs	r3, #2
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	e004      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b70      	cmp	r3, #112	; 0x70
 800493a:	d101      	bne.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800493c:	2301      	movs	r3, #1
 800493e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f023 0207 	bic.w	r2, r3, #7
 8004948:	4909      	ldr	r1, [pc, #36]	; (8004970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	429a      	cmp	r2, r3
 800495c:	d001      	beq.n	8004962 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000
 8004970:	40022000 	.word	0x40022000

08004974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800497c:	2300      	movs	r3, #0
 800497e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004980:	2300      	movs	r3, #0
 8004982:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498c:	2b00      	cmp	r3, #0
 800498e:	d041      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004994:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004998:	d02a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800499a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800499e:	d824      	bhi.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049a4:	d008      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049aa:	d81e      	bhi.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b4:	d010      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049b6:	e018      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049b8:	4b86      	ldr	r3, [pc, #536]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a85      	ldr	r2, [pc, #532]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c4:	e015      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3304      	adds	r3, #4
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fabb 	bl	8004f48 <RCCEx_PLLSAI1_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d6:	e00c      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3320      	adds	r3, #32
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fba6 	bl	8005130 <RCCEx_PLLSAI2_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e8:	e003      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	74fb      	strb	r3, [r7, #19]
      break;
 80049ee:	e000      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f2:	7cfb      	ldrb	r3, [r7, #19]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10b      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049f8:	4b76      	ldr	r3, [pc, #472]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a06:	4973      	ldr	r1, [pc, #460]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a0e:	e001      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d041      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a28:	d02a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a2e:	d824      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a34:	d008      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a3a:	d81e      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a44:	d010      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a46:	e018      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a48:	4b62      	ldr	r3, [pc, #392]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a61      	ldr	r2, [pc, #388]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a54:	e015      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fa73 	bl	8004f48 <RCCEx_PLLSAI1_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a66:	e00c      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3320      	adds	r3, #32
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fb5e 	bl	8005130 <RCCEx_PLLSAI2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a7e:	e000      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10b      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a88:	4b52      	ldr	r3, [pc, #328]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a96:	494f      	ldr	r1, [pc, #316]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a9e:	e001      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80a0 	beq.w	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	4a40      	ldr	r2, [pc, #256]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad8:	4b3e      	ldr	r3, [pc, #248]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae8:	4b3b      	ldr	r3, [pc, #236]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a3a      	ldr	r2, [pc, #232]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004af4:	f7fc fbbc 	bl	8001270 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004afa:	e009      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afc:	f7fc fbb8 	bl	8001270 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d902      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b0e:	e005      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b10:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0ef      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b1c:	7cfb      	ldrb	r3, [r7, #19]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d15c      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b22:	4b2c      	ldr	r3, [pc, #176]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01f      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d019      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b40:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b4c:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b6c:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7e:	f7fc fb77 	bl	8001270 <HAL_GetTick>
 8004b82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b84:	e00b      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b86:	f7fc fb73 	bl	8001270 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d902      	bls.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0ec      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc2:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bca:	e009      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	74bb      	strb	r3, [r7, #18]
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be0:	7c7b      	ldrb	r3, [r7, #17]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d105      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be6:	4b9e      	ldr	r3, [pc, #632]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	4a9d      	ldr	r2, [pc, #628]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bfe:	4b98      	ldr	r3, [pc, #608]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f023 0203 	bic.w	r2, r3, #3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	4994      	ldr	r1, [pc, #592]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c20:	4b8f      	ldr	r3, [pc, #572]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f023 020c 	bic.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	498c      	ldr	r1, [pc, #560]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c42:	4b87      	ldr	r3, [pc, #540]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	4983      	ldr	r1, [pc, #524]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c64:	4b7e      	ldr	r3, [pc, #504]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	497b      	ldr	r1, [pc, #492]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c86:	4b76      	ldr	r3, [pc, #472]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c94:	4972      	ldr	r1, [pc, #456]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ca8:	4b6d      	ldr	r3, [pc, #436]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	496a      	ldr	r1, [pc, #424]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cca:	4b65      	ldr	r3, [pc, #404]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	4961      	ldr	r1, [pc, #388]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cec:	4b5c      	ldr	r3, [pc, #368]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfa:	4959      	ldr	r1, [pc, #356]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d0e:	4b54      	ldr	r3, [pc, #336]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	4950      	ldr	r1, [pc, #320]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d30:	4b4b      	ldr	r3, [pc, #300]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	4948      	ldr	r1, [pc, #288]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d52:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d60:	493f      	ldr	r1, [pc, #252]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d028      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d74:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d82:	4937      	ldr	r1, [pc, #220]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d92:	d106      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d94:	4b32      	ldr	r3, [pc, #200]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a31      	ldr	r2, [pc, #196]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9e:	60d3      	str	r3, [r2, #12]
 8004da0:	e011      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004daa:	d10c      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	2101      	movs	r1, #1
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f8c8 	bl	8004f48 <RCCEx_PLLSAI1_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004dc2:	7cfb      	ldrb	r3, [r7, #19]
 8004dc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d028      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	491f      	ldr	r1, [pc, #124]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df0:	d106      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df2:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4a1a      	ldr	r2, [pc, #104]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dfc:	60d3      	str	r3, [r2, #12]
 8004dfe:	e011      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e08:	d10c      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	2101      	movs	r1, #1
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f899 	bl	8004f48 <RCCEx_PLLSAI1_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e1a:	7cfb      	ldrb	r3, [r7, #19]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e20:	7cfb      	ldrb	r3, [r7, #19]
 8004e22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d02b      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	4908      	ldr	r1, [pc, #32]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4e:	d109      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a02      	ldr	r2, [pc, #8]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5a:	60d3      	str	r3, [r2, #12]
 8004e5c:	e014      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2101      	movs	r1, #1
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f867 	bl	8004f48 <RCCEx_PLLSAI1_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d02f      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e94:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea2:	4928      	ldr	r1, [pc, #160]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	2102      	movs	r1, #2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f844 	bl	8004f48 <RCCEx_PLLSAI1_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	74bb      	strb	r3, [r7, #18]
 8004ece:	e011      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3320      	adds	r3, #32
 8004ede:	2102      	movs	r1, #2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f925 	bl	8005130 <RCCEx_PLLSAI2_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0e:	490d      	ldr	r1, [pc, #52]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f32:	4904      	ldr	r1, [pc, #16]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000

08004f48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f56:	4b75      	ldr	r3, [pc, #468]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d018      	beq.n	8004f94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f62:	4b72      	ldr	r3, [pc, #456]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0203 	and.w	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d10d      	bne.n	8004f8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
       ||
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f7a:	4b6c      	ldr	r3, [pc, #432]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
       ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d047      	beq.n	800501e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
 8004f92:	e044      	b.n	800501e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d018      	beq.n	8004fce <RCCEx_PLLSAI1_Config+0x86>
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d825      	bhi.n	8004fec <RCCEx_PLLSAI1_Config+0xa4>
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d002      	beq.n	8004faa <RCCEx_PLLSAI1_Config+0x62>
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d009      	beq.n	8004fbc <RCCEx_PLLSAI1_Config+0x74>
 8004fa8:	e020      	b.n	8004fec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004faa:	4b60      	ldr	r3, [pc, #384]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11d      	bne.n	8004ff2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fba:	e01a      	b.n	8004ff2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fbc:	4b5b      	ldr	r3, [pc, #364]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d116      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fcc:	e013      	b.n	8004ff6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fce:	4b57      	ldr	r3, [pc, #348]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10f      	bne.n	8004ffa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fda:	4b54      	ldr	r3, [pc, #336]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fea:	e006      	b.n	8004ffa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e004      	b.n	8004ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e002      	b.n	8004ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ffa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005002:	4b4a      	ldr	r3, [pc, #296]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	430b      	orrs	r3, r1
 8005018:	4944      	ldr	r1, [pc, #272]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 800501a:	4313      	orrs	r3, r2
 800501c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d17d      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005024:	4b41      	ldr	r3, [pc, #260]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a40      	ldr	r2, [pc, #256]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 800502a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800502e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005030:	f7fc f91e 	bl	8001270 <HAL_GetTick>
 8005034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005036:	e009      	b.n	800504c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005038:	f7fc f91a 	bl	8001270 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	73fb      	strb	r3, [r7, #15]
        break;
 800504a:	e005      	b.n	8005058 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800504c:	4b37      	ldr	r3, [pc, #220]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1ef      	bne.n	8005038 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d160      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d111      	bne.n	8005088 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005064:	4b31      	ldr	r3, [pc, #196]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6892      	ldr	r2, [r2, #8]
 8005074:	0211      	lsls	r1, r2, #8
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68d2      	ldr	r2, [r2, #12]
 800507a:	0912      	lsrs	r2, r2, #4
 800507c:	0452      	lsls	r2, r2, #17
 800507e:	430a      	orrs	r2, r1
 8005080:	492a      	ldr	r1, [pc, #168]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
 8005086:	e027      	b.n	80050d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d112      	bne.n	80050b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800508e:	4b27      	ldr	r3, [pc, #156]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005096:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6892      	ldr	r2, [r2, #8]
 800509e:	0211      	lsls	r1, r2, #8
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6912      	ldr	r2, [r2, #16]
 80050a4:	0852      	lsrs	r2, r2, #1
 80050a6:	3a01      	subs	r2, #1
 80050a8:	0552      	lsls	r2, r2, #21
 80050aa:	430a      	orrs	r2, r1
 80050ac:	491f      	ldr	r1, [pc, #124]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	610b      	str	r3, [r1, #16]
 80050b2:	e011      	b.n	80050d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050b4:	4b1d      	ldr	r3, [pc, #116]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6892      	ldr	r2, [r2, #8]
 80050c4:	0211      	lsls	r1, r2, #8
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6952      	ldr	r2, [r2, #20]
 80050ca:	0852      	lsrs	r2, r2, #1
 80050cc:	3a01      	subs	r2, #1
 80050ce:	0652      	lsls	r2, r2, #25
 80050d0:	430a      	orrs	r2, r1
 80050d2:	4916      	ldr	r1, [pc, #88]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050d8:	4b14      	ldr	r3, [pc, #80]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a13      	ldr	r2, [pc, #76]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fc f8c4 	bl	8001270 <HAL_GetTick>
 80050e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ea:	e009      	b.n	8005100 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ec:	f7fc f8c0 	bl	8001270 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d902      	bls.n	8005100 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	73fb      	strb	r3, [r7, #15]
          break;
 80050fe:	e005      	b.n	800510c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ef      	beq.n	80050ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	4904      	ldr	r1, [pc, #16]	; (800512c <RCCEx_PLLSAI1_Config+0x1e4>)
 800511c:	4313      	orrs	r3, r2
 800511e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000

08005130 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800513e:	4b6a      	ldr	r3, [pc, #424]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d018      	beq.n	800517c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800514a:	4b67      	ldr	r3, [pc, #412]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0203 	and.w	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d10d      	bne.n	8005176 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
       ||
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005162:	4b61      	ldr	r3, [pc, #388]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
       ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d047      	beq.n	8005206 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e044      	b.n	8005206 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b03      	cmp	r3, #3
 8005182:	d018      	beq.n	80051b6 <RCCEx_PLLSAI2_Config+0x86>
 8005184:	2b03      	cmp	r3, #3
 8005186:	d825      	bhi.n	80051d4 <RCCEx_PLLSAI2_Config+0xa4>
 8005188:	2b01      	cmp	r3, #1
 800518a:	d002      	beq.n	8005192 <RCCEx_PLLSAI2_Config+0x62>
 800518c:	2b02      	cmp	r3, #2
 800518e:	d009      	beq.n	80051a4 <RCCEx_PLLSAI2_Config+0x74>
 8005190:	e020      	b.n	80051d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005192:	4b55      	ldr	r3, [pc, #340]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d11d      	bne.n	80051da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a2:	e01a      	b.n	80051da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a4:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d116      	bne.n	80051de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b4:	e013      	b.n	80051de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b6:	4b4c      	ldr	r3, [pc, #304]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051c2:	4b49      	ldr	r3, [pc, #292]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051d2:	e006      	b.n	80051e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      break;
 80051d8:	e004      	b.n	80051e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051da:	bf00      	nop
 80051dc:	e002      	b.n	80051e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051de:	bf00      	nop
 80051e0:	e000      	b.n	80051e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ea:	4b3f      	ldr	r3, [pc, #252]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	430b      	orrs	r3, r1
 8005200:	4939      	ldr	r1, [pc, #228]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d167      	bne.n	80052dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a35      	ldr	r2, [pc, #212]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005218:	f7fc f82a 	bl	8001270 <HAL_GetTick>
 800521c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800521e:	e009      	b.n	8005234 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005220:	f7fc f826 	bl	8001270 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d902      	bls.n	8005234 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	73fb      	strb	r3, [r7, #15]
        break;
 8005232:	e005      	b.n	8005240 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005234:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ef      	bne.n	8005220 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d14a      	bne.n	80052dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d111      	bne.n	8005270 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800524c:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6892      	ldr	r2, [r2, #8]
 800525c:	0211      	lsls	r1, r2, #8
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68d2      	ldr	r2, [r2, #12]
 8005262:	0912      	lsrs	r2, r2, #4
 8005264:	0452      	lsls	r2, r2, #17
 8005266:	430a      	orrs	r2, r1
 8005268:	491f      	ldr	r1, [pc, #124]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526a:	4313      	orrs	r3, r2
 800526c:	614b      	str	r3, [r1, #20]
 800526e:	e011      	b.n	8005294 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005270:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005278:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6892      	ldr	r2, [r2, #8]
 8005280:	0211      	lsls	r1, r2, #8
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6912      	ldr	r2, [r2, #16]
 8005286:	0852      	lsrs	r2, r2, #1
 8005288:	3a01      	subs	r2, #1
 800528a:	0652      	lsls	r2, r2, #25
 800528c:	430a      	orrs	r2, r1
 800528e:	4916      	ldr	r1, [pc, #88]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005290:	4313      	orrs	r3, r2
 8005292:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005294:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a0:	f7fb ffe6 	bl	8001270 <HAL_GetTick>
 80052a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052a6:	e009      	b.n	80052bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052a8:	f7fb ffe2 	bl	8001270 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d902      	bls.n	80052bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	73fb      	strb	r3, [r7, #15]
          break;
 80052ba:	e005      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ef      	beq.n	80052a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d0:	695a      	ldr	r2, [r3, #20]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	4904      	ldr	r1, [pc, #16]	; (80052e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000

080052ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e049      	b.n	8005392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fb fde2 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 faa2 	bl	8005874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d001      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e04f      	b.n	8005454 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a23      	ldr	r2, [pc, #140]	; (8005460 <HAL_TIM_Base_Start_IT+0xc4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01d      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x76>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053de:	d018      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x76>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <HAL_TIM_Base_Start_IT+0xc8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x76>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <HAL_TIM_Base_Start_IT+0xcc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x76>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <HAL_TIM_Base_Start_IT+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x76>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <HAL_TIM_Base_Start_IT+0xd4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x76>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a19      	ldr	r2, [pc, #100]	; (8005474 <HAL_TIM_Base_Start_IT+0xd8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d115      	bne.n	800543e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	4b17      	ldr	r3, [pc, #92]	; (8005478 <HAL_TIM_Base_Start_IT+0xdc>)
 800541a:	4013      	ands	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b06      	cmp	r3, #6
 8005422:	d015      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0xb4>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542a:	d011      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543c:	e008      	b.n	8005450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e000      	b.n	8005452 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40013400 	.word	0x40013400
 8005474:	40014000 	.word	0x40014000
 8005478:	00010007 	.word	0x00010007

0800547c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e049      	b.n	8005522 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fb fcf4 	bl	8000e90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3304      	adds	r3, #4
 80054b8:	4619      	mov	r1, r3
 80054ba:	4610      	mov	r0, r2
 80054bc:	f000 f9da 	bl	8005874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01b      	beq.n	800558e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f06f 0202 	mvn.w	r2, #2
 800555e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f95f 	bl	8005838 <HAL_TIM_IC_CaptureCallback>
 800557a:	e005      	b.n	8005588 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f951 	bl	8005824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f962 	bl	800584c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d020      	beq.n	80055da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01b      	beq.n	80055da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0204 	mvn.w	r2, #4
 80055aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f939 	bl	8005838 <HAL_TIM_IC_CaptureCallback>
 80055c6:	e005      	b.n	80055d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f92b 	bl	8005824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f93c 	bl	800584c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01b      	beq.n	8005626 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f06f 0208 	mvn.w	r2, #8
 80055f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2204      	movs	r2, #4
 80055fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f913 	bl	8005838 <HAL_TIM_IC_CaptureCallback>
 8005612:	e005      	b.n	8005620 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f905 	bl	8005824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f916 	bl	800584c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01b      	beq.n	8005672 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f06f 0210 	mvn.w	r2, #16
 8005642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2208      	movs	r2, #8
 8005648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8ed 	bl	8005838 <HAL_TIM_IC_CaptureCallback>
 800565e:	e005      	b.n	800566c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f8df 	bl	8005824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8f0 	bl	800584c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f06f 0201 	mvn.w	r2, #1
 800568e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fa ffdf 	bl	8000654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00c      	beq.n	80056ba <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fd5d 	bl	8006174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fd55 	bl	8006188 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00c      	beq.n	8005702 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f8af 	bl	8005860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f06f 0220 	mvn.w	r2, #32
 800571e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fd1d 	bl	8006160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_TIM_OC_ConfigChannel+0x1e>
 800574a:	2302      	movs	r3, #2
 800574c:	e066      	b.n	800581c <HAL_TIM_OC_ConfigChannel+0xec>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b14      	cmp	r3, #20
 800575a:	d857      	bhi.n	800580c <HAL_TIM_OC_ConfigChannel+0xdc>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <HAL_TIM_OC_ConfigChannel+0x34>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	080057b9 	.word	0x080057b9
 8005768:	0800580d 	.word	0x0800580d
 800576c:	0800580d 	.word	0x0800580d
 8005770:	0800580d 	.word	0x0800580d
 8005774:	080057c7 	.word	0x080057c7
 8005778:	0800580d 	.word	0x0800580d
 800577c:	0800580d 	.word	0x0800580d
 8005780:	0800580d 	.word	0x0800580d
 8005784:	080057d5 	.word	0x080057d5
 8005788:	0800580d 	.word	0x0800580d
 800578c:	0800580d 	.word	0x0800580d
 8005790:	0800580d 	.word	0x0800580d
 8005794:	080057e3 	.word	0x080057e3
 8005798:	0800580d 	.word	0x0800580d
 800579c:	0800580d 	.word	0x0800580d
 80057a0:	0800580d 	.word	0x0800580d
 80057a4:	080057f1 	.word	0x080057f1
 80057a8:	0800580d 	.word	0x0800580d
 80057ac:	0800580d 	.word	0x0800580d
 80057b0:	0800580d 	.word	0x0800580d
 80057b4:	080057ff 	.word	0x080057ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f8f2 	bl	80059a8 <TIM_OC1_SetConfig>
      break;
 80057c4:	e025      	b.n	8005812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 f97b 	bl	8005ac8 <TIM_OC2_SetConfig>
      break;
 80057d2:	e01e      	b.n	8005812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f9fe 	bl	8005bdc <TIM_OC3_SetConfig>
      break;
 80057e0:	e017      	b.n	8005812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fa7f 	bl	8005cec <TIM_OC4_SetConfig>
      break;
 80057ee:	e010      	b.n	8005812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fae2 	bl	8005dc0 <TIM_OC5_SetConfig>
      break;
 80057fc:	e009      	b.n	8005812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fb3f 	bl	8005e88 <TIM_OC6_SetConfig>
      break;
 800580a:	e002      	b.n	8005812 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
      break;
 8005810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a40      	ldr	r2, [pc, #256]	; (8005988 <TIM_Base_SetConfig+0x114>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d00f      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a3d      	ldr	r2, [pc, #244]	; (800598c <TIM_Base_SetConfig+0x118>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3c      	ldr	r2, [pc, #240]	; (8005990 <TIM_Base_SetConfig+0x11c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a3b      	ldr	r2, [pc, #236]	; (8005994 <TIM_Base_SetConfig+0x120>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3a      	ldr	r2, [pc, #232]	; (8005998 <TIM_Base_SetConfig+0x124>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d108      	bne.n	80058c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2f      	ldr	r2, [pc, #188]	; (8005988 <TIM_Base_SetConfig+0x114>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01f      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d4:	d01b      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2c      	ldr	r2, [pc, #176]	; (800598c <TIM_Base_SetConfig+0x118>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d017      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <TIM_Base_SetConfig+0x11c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2a      	ldr	r2, [pc, #168]	; (8005994 <TIM_Base_SetConfig+0x120>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00f      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a29      	ldr	r2, [pc, #164]	; (8005998 <TIM_Base_SetConfig+0x124>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a28      	ldr	r2, [pc, #160]	; (800599c <TIM_Base_SetConfig+0x128>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <TIM_Base_SetConfig+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <TIM_Base_SetConfig+0x130>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <TIM_Base_SetConfig+0x114>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0xf8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <TIM_Base_SetConfig+0x124>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0xf8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a11      	ldr	r2, [pc, #68]	; (800599c <TIM_Base_SetConfig+0x128>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0xf8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <TIM_Base_SetConfig+0x12c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0xf8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a0f      	ldr	r2, [pc, #60]	; (80059a4 <TIM_Base_SetConfig+0x130>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d103      	bne.n	8005974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	615a      	str	r2, [r3, #20]
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f023 0201 	bic.w	r2, r3, #1
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0303 	bic.w	r3, r3, #3
 80059e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f023 0302 	bic.w	r3, r3, #2
 80059f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a2c      	ldr	r2, [pc, #176]	; (8005ab4 <TIM_OC1_SetConfig+0x10c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00f      	beq.n	8005a28 <TIM_OC1_SetConfig+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a2b      	ldr	r2, [pc, #172]	; (8005ab8 <TIM_OC1_SetConfig+0x110>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_OC1_SetConfig+0x80>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <TIM_OC1_SetConfig+0x114>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_OC1_SetConfig+0x80>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a29      	ldr	r2, [pc, #164]	; (8005ac0 <TIM_OC1_SetConfig+0x118>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_OC1_SetConfig+0x80>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <TIM_OC1_SetConfig+0x11c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d10c      	bne.n	8005a42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f023 0308 	bic.w	r3, r3, #8
 8005a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 0304 	bic.w	r3, r3, #4
 8005a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <TIM_OC1_SetConfig+0x10c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00f      	beq.n	8005a6a <TIM_OC1_SetConfig+0xc2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <TIM_OC1_SetConfig+0x110>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00b      	beq.n	8005a6a <TIM_OC1_SetConfig+0xc2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a19      	ldr	r2, [pc, #100]	; (8005abc <TIM_OC1_SetConfig+0x114>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d007      	beq.n	8005a6a <TIM_OC1_SetConfig+0xc2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <TIM_OC1_SetConfig+0x118>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d003      	beq.n	8005a6a <TIM_OC1_SetConfig+0xc2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <TIM_OC1_SetConfig+0x11c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d111      	bne.n	8005a8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800

08005ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f023 0210 	bic.w	r2, r3, #16
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0320 	bic.w	r3, r3, #32
 8005b16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a28      	ldr	r2, [pc, #160]	; (8005bc8 <TIM_OC2_SetConfig+0x100>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC2_SetConfig+0x6c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a27      	ldr	r2, [pc, #156]	; (8005bcc <TIM_OC2_SetConfig+0x104>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d10d      	bne.n	8005b50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <TIM_OC2_SetConfig+0x100>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00f      	beq.n	8005b78 <TIM_OC2_SetConfig+0xb0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <TIM_OC2_SetConfig+0x104>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_OC2_SetConfig+0xb0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <TIM_OC2_SetConfig+0x108>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_OC2_SetConfig+0xb0>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <TIM_OC2_SetConfig+0x10c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC2_SetConfig+0xb0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <TIM_OC2_SetConfig+0x110>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d113      	bne.n	8005ba0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800

08005bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <TIM_OC3_SetConfig+0xfc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_OC3_SetConfig+0x6a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a26      	ldr	r2, [pc, #152]	; (8005cdc <TIM_OC3_SetConfig+0x100>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10d      	bne.n	8005c62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <TIM_OC3_SetConfig+0xfc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00f      	beq.n	8005c8a <TIM_OC3_SetConfig+0xae>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <TIM_OC3_SetConfig+0x100>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <TIM_OC3_SetConfig+0xae>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a1a      	ldr	r2, [pc, #104]	; (8005ce0 <TIM_OC3_SetConfig+0x104>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <TIM_OC3_SetConfig+0xae>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <TIM_OC3_SetConfig+0x108>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_OC3_SetConfig+0xae>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <TIM_OC3_SetConfig+0x10c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d113      	bne.n	8005cb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40013400 	.word	0x40013400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800

08005cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	031b      	lsls	r3, r3, #12
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a18      	ldr	r2, [pc, #96]	; (8005dac <TIM_OC4_SetConfig+0xc0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00f      	beq.n	8005d70 <TIM_OC4_SetConfig+0x84>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <TIM_OC4_SetConfig+0xc4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_OC4_SetConfig+0x84>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a16      	ldr	r2, [pc, #88]	; (8005db4 <TIM_OC4_SetConfig+0xc8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_OC4_SetConfig+0x84>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <TIM_OC4_SetConfig+0xcc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC4_SetConfig+0x84>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <TIM_OC4_SetConfig+0xd0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d109      	bne.n	8005d84 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40014400 	.word	0x40014400
 8005dbc:	40014800 	.word	0x40014800

08005dc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <TIM_OC5_SetConfig+0xb4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00f      	beq.n	8005e3a <TIM_OC5_SetConfig+0x7a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <TIM_OC5_SetConfig+0xb8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00b      	beq.n	8005e3a <TIM_OC5_SetConfig+0x7a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <TIM_OC5_SetConfig+0xbc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d007      	beq.n	8005e3a <TIM_OC5_SetConfig+0x7a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a14      	ldr	r2, [pc, #80]	; (8005e80 <TIM_OC5_SetConfig+0xc0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_OC5_SetConfig+0x7a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <TIM_OC5_SetConfig+0xc4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d109      	bne.n	8005e4e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	051b      	lsls	r3, r3, #20
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <TIM_OC6_SetConfig+0xb8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00f      	beq.n	8005f04 <TIM_OC6_SetConfig+0x7c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <TIM_OC6_SetConfig+0xbc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00b      	beq.n	8005f04 <TIM_OC6_SetConfig+0x7c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a16      	ldr	r2, [pc, #88]	; (8005f48 <TIM_OC6_SetConfig+0xc0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d007      	beq.n	8005f04 <TIM_OC6_SetConfig+0x7c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <TIM_OC6_SetConfig+0xc4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_OC6_SetConfig+0x7c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <TIM_OC6_SetConfig+0xc8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d109      	bne.n	8005f18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	029b      	lsls	r3, r3, #10
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40013400 	.word	0x40013400
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800

08005f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e068      	b.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2e      	ldr	r2, [pc, #184]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2d      	ldr	r2, [pc, #180]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1e      	ldr	r2, [pc, #120]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01d      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d018      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	; (8006054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1a      	ldr	r2, [pc, #104]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a18      	ldr	r2, [pc, #96]	; (800605c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a13      	ldr	r2, [pc, #76]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10c      	bne.n	800602c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	4313      	orrs	r3, r2
 8006022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40013400 	.word	0x40013400
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40014000 	.word	0x40014000

08006064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800607c:	2302      	movs	r3, #2
 800607e:	e065      	b.n	800614c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	041b      	lsls	r3, r3, #16
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a16      	ldr	r2, [pc, #88]	; (8006158 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a14      	ldr	r2, [pc, #80]	; (800615c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d115      	bne.n	800613a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	051b      	lsls	r3, r3, #20
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40013400 	.word	0x40013400

08006160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e040      	b.n	8006230 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fa feb2 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	; 0x24
 80061c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0201 	bic.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fe3e 	bl	8006e64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fb83 	bl	80068f4 <UART_SetConfig>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e01b      	b.n	8006230 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 febd 	bl	8006fa8 <UART_CheckIdleState>
 800622e:	4603      	mov	r3, r0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006238:	b480      	push	{r7}
 800623a:	b08b      	sub	sp, #44	; 0x2c
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624a:	2b20      	cmp	r3, #32
 800624c:	d147      	bne.n	80062de <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_UART_Transmit_IT+0x22>
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e040      	b.n	80062e0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2221      	movs	r2, #33	; 0x21
 8006286:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006290:	d107      	bne.n	80062a2 <HAL_UART_Transmit_IT+0x6a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <HAL_UART_Transmit_IT+0xb4>)
 800629e:	66da      	str	r2, [r3, #108]	; 0x6c
 80062a0:	e002      	b.n	80062a8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <HAL_UART_Transmit_IT+0xb8>)
 80062a6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	613b      	str	r3, [r7, #16]
   return(result);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	623b      	str	r3, [r7, #32]
 80062c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	69f9      	ldr	r1, [r7, #28]
 80062cc:	6a3a      	ldr	r2, [r7, #32]
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e000      	b.n	80062e0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80062de:	2302      	movs	r3, #2
  }
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	372c      	adds	r7, #44	; 0x2c
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	08007373 	.word	0x08007373
 80062f0:	080072bb 	.word	0x080072bb

080062f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b0ba      	sub	sp, #232	; 0xe8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800631a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800631e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006322:	4013      	ands	r3, r2
 8006324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d115      	bne.n	800635c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00f      	beq.n	800635c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 82ae 	beq.w	80068ae <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
      }
      return;
 800635a:	e2a8      	b.n	80068ae <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800635c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 8117 	beq.w	8006594 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006372:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006376:	4b85      	ldr	r3, [pc, #532]	; (800658c <HAL_UART_IRQHandler+0x298>)
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 810a 	beq.w	8006594 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d011      	beq.n	80063b0 <HAL_UART_IRQHandler+0xbc>
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2201      	movs	r2, #1
 800639e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a6:	f043 0201 	orr.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d011      	beq.n	80063e0 <HAL_UART_IRQHandler+0xec>
 80063bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2202      	movs	r2, #2
 80063ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d6:	f043 0204 	orr.w	r2, r3, #4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d011      	beq.n	8006410 <HAL_UART_IRQHandler+0x11c>
 80063ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2204      	movs	r2, #4
 80063fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006406:	f043 0202 	orr.w	r2, r3, #2
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d017      	beq.n	800644c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800642c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2208      	movs	r2, #8
 800643a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006442:	f043 0208 	orr.w	r2, r3, #8
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800644c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006454:	2b00      	cmp	r3, #0
 8006456:	d012      	beq.n	800647e <HAL_UART_IRQHandler+0x18a>
 8006458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00c      	beq.n	800647e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800646c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006474:	f043 0220 	orr.w	r2, r3, #32
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8214 	beq.w	80068b2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00d      	beq.n	80064b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c6:	2b40      	cmp	r3, #64	; 0x40
 80064c8:	d005      	beq.n	80064d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d04f      	beq.n	8006576 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fe75 	bl	80071c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d141      	bne.n	800656e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3308      	adds	r3, #8
 8006512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006516:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800651a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800652e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1d9      	bne.n	80064ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653a:	2b00      	cmp	r3, #0
 800653c:	d013      	beq.n	8006566 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006542:	4a13      	ldr	r2, [pc, #76]	; (8006590 <HAL_UART_IRQHandler+0x29c>)
 8006544:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654a:	4618      	mov	r0, r3
 800654c:	f7fa ffeb 	bl	8001526 <HAL_DMA_Abort_IT>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d017      	beq.n	8006586 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006560:	4610      	mov	r0, r2
 8006562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	e00f      	b.n	8006586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f9ae 	bl	80068c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	e00b      	b.n	8006586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9aa 	bl	80068c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	e007      	b.n	8006586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9a6 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006584:	e195      	b.n	80068b2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006586:	bf00      	nop
    return;
 8006588:	e193      	b.n	80068b2 <HAL_UART_IRQHandler+0x5be>
 800658a:	bf00      	nop
 800658c:	04000120 	.word	0x04000120
 8006590:	0800728f 	.word	0x0800728f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006598:	2b01      	cmp	r3, #1
 800659a:	f040 814e 	bne.w	800683a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8147 	beq.w	800683a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8140 	beq.w	800683a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2210      	movs	r2, #16
 80065c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	f040 80b8 	bne.w	8006742 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8167 	beq.w	80068b6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065f2:	429a      	cmp	r2, r3
 80065f4:	f080 815f 	bcs.w	80068b6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	f040 8086 	bne.w	8006720 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800662c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800663e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006642:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800664a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1da      	bne.n	8006614 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800666e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006682:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006686:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800668a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e1      	bne.n	800665e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3308      	adds	r3, #8
 80066ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e3      	bne.n	800669a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f0:	f023 0310 	bic.w	r3, r3, #16
 80066f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006702:	65bb      	str	r3, [r7, #88]	; 0x58
 8006704:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e4      	bne.n	80066e0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671a:	4618      	mov	r0, r3
 800671c:	f7fa fec5 	bl	80014aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006732:	b29b      	uxth	r3, r3
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	b29b      	uxth	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8ce 	bl	80068dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006740:	e0b9      	b.n	80068b6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800674e:	b29b      	uxth	r3, r3
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 80ab 	beq.w	80068ba <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80a6 	beq.w	80068ba <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
 8006792:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e4      	bne.n	800676e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3308      	adds	r3, #8
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	623b      	str	r3, [r7, #32]
   return(result);
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	f023 0301 	bic.w	r3, r3, #1
 80067ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067c8:	633a      	str	r2, [r7, #48]	; 0x30
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e3      	bne.n	80067a4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f023 0310 	bic.w	r3, r3, #16
 8006804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	69b9      	ldr	r1, [r7, #24]
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	617b      	str	r3, [r7, #20]
   return(result);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e4      	bne.n	80067f0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2202      	movs	r2, #2
 800682a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800682c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f852 	bl	80068dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006838:	e03f      	b.n	80068ba <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00e      	beq.n	8006864 <HAL_UART_IRQHandler+0x570>
 8006846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d008      	beq.n	8006864 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800685a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fe12 	bl	8007486 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006862:	e02d      	b.n	80068c0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00e      	beq.n	800688e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01c      	beq.n	80068be <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
    }
    return;
 800688c:	e017      	b.n	80068be <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d012      	beq.n	80068c0 <HAL_UART_IRQHandler+0x5cc>
 800689a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00c      	beq.n	80068c0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fdc3 	bl	8007432 <UART_EndTransmit_IT>
    return;
 80068ac:	e008      	b.n	80068c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80068ae:	bf00      	nop
 80068b0:	e006      	b.n	80068c0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80068b2:	bf00      	nop
 80068b4:	e004      	b.n	80068c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80068b6:	bf00      	nop
 80068b8:	e002      	b.n	80068c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80068be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80068c0:	37e8      	adds	r7, #232	; 0xe8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop

080068c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f8:	b08a      	sub	sp, #40	; 0x28
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	431a      	orrs	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	431a      	orrs	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	4313      	orrs	r3, r2
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4ba4      	ldr	r3, [pc, #656]	; (8006bb4 <UART_SetConfig+0x2c0>)
 8006924:	4013      	ands	r3, r2
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800692c:	430b      	orrs	r3, r1
 800692e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a99      	ldr	r2, [pc, #612]	; (8006bb8 <UART_SetConfig+0x2c4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695c:	4313      	orrs	r3, r2
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a90      	ldr	r2, [pc, #576]	; (8006bbc <UART_SetConfig+0x2c8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d126      	bne.n	80069cc <UART_SetConfig+0xd8>
 800697e:	4b90      	ldr	r3, [pc, #576]	; (8006bc0 <UART_SetConfig+0x2cc>)
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	2b03      	cmp	r3, #3
 800698a:	d81b      	bhi.n	80069c4 <UART_SetConfig+0xd0>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0xa0>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069b5 	.word	0x080069b5
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069bd 	.word	0x080069bd
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069aa:	e116      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069ac:	2302      	movs	r3, #2
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b2:	e112      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069b4:	2304      	movs	r3, #4
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ba:	e10e      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069bc:	2308      	movs	r3, #8
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c2:	e10a      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ca:	e106      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a7c      	ldr	r2, [pc, #496]	; (8006bc4 <UART_SetConfig+0x2d0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d138      	bne.n	8006a48 <UART_SetConfig+0x154>
 80069d6:	4b7a      	ldr	r3, [pc, #488]	; (8006bc0 <UART_SetConfig+0x2cc>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069dc:	f003 030c 	and.w	r3, r3, #12
 80069e0:	2b0c      	cmp	r3, #12
 80069e2:	d82d      	bhi.n	8006a40 <UART_SetConfig+0x14c>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <UART_SetConfig+0xf8>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a21 	.word	0x08006a21
 80069f0:	08006a41 	.word	0x08006a41
 80069f4:	08006a41 	.word	0x08006a41
 80069f8:	08006a41 	.word	0x08006a41
 80069fc:	08006a31 	.word	0x08006a31
 8006a00:	08006a41 	.word	0x08006a41
 8006a04:	08006a41 	.word	0x08006a41
 8006a08:	08006a41 	.word	0x08006a41
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a41 	.word	0x08006a41
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a39 	.word	0x08006a39
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e0d8      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2e:	e0d4      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a36:	e0d0      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3e:	e0cc      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a46:	e0c8      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a5e      	ldr	r2, [pc, #376]	; (8006bc8 <UART_SetConfig+0x2d4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d125      	bne.n	8006a9e <UART_SetConfig+0x1aa>
 8006a52:	4b5b      	ldr	r3, [pc, #364]	; (8006bc0 <UART_SetConfig+0x2cc>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a5c:	2b30      	cmp	r3, #48	; 0x30
 8006a5e:	d016      	beq.n	8006a8e <UART_SetConfig+0x19a>
 8006a60:	2b30      	cmp	r3, #48	; 0x30
 8006a62:	d818      	bhi.n	8006a96 <UART_SetConfig+0x1a2>
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d00a      	beq.n	8006a7e <UART_SetConfig+0x18a>
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d814      	bhi.n	8006a96 <UART_SetConfig+0x1a2>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <UART_SetConfig+0x182>
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d008      	beq.n	8006a86 <UART_SetConfig+0x192>
 8006a74:	e00f      	b.n	8006a96 <UART_SetConfig+0x1a2>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7c:	e0ad      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a84:	e0a9      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a86:	2304      	movs	r3, #4
 8006a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8c:	e0a5      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a94:	e0a1      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a96:	2310      	movs	r3, #16
 8006a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9c:	e09d      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a4a      	ldr	r2, [pc, #296]	; (8006bcc <UART_SetConfig+0x2d8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d125      	bne.n	8006af4 <UART_SetConfig+0x200>
 8006aa8:	4b45      	ldr	r3, [pc, #276]	; (8006bc0 <UART_SetConfig+0x2cc>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab4:	d016      	beq.n	8006ae4 <UART_SetConfig+0x1f0>
 8006ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab8:	d818      	bhi.n	8006aec <UART_SetConfig+0x1f8>
 8006aba:	2b80      	cmp	r3, #128	; 0x80
 8006abc:	d00a      	beq.n	8006ad4 <UART_SetConfig+0x1e0>
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d814      	bhi.n	8006aec <UART_SetConfig+0x1f8>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <UART_SetConfig+0x1d8>
 8006ac6:	2b40      	cmp	r3, #64	; 0x40
 8006ac8:	d008      	beq.n	8006adc <UART_SetConfig+0x1e8>
 8006aca:	e00f      	b.n	8006aec <UART_SetConfig+0x1f8>
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad2:	e082      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	e07e      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae2:	e07a      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e076      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e072      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a35      	ldr	r2, [pc, #212]	; (8006bd0 <UART_SetConfig+0x2dc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d12a      	bne.n	8006b54 <UART_SetConfig+0x260>
 8006afe:	4b30      	ldr	r3, [pc, #192]	; (8006bc0 <UART_SetConfig+0x2cc>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0c:	d01a      	beq.n	8006b44 <UART_SetConfig+0x250>
 8006b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b12:	d81b      	bhi.n	8006b4c <UART_SetConfig+0x258>
 8006b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b18:	d00c      	beq.n	8006b34 <UART_SetConfig+0x240>
 8006b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b1e:	d815      	bhi.n	8006b4c <UART_SetConfig+0x258>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <UART_SetConfig+0x238>
 8006b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b28:	d008      	beq.n	8006b3c <UART_SetConfig+0x248>
 8006b2a:	e00f      	b.n	8006b4c <UART_SetConfig+0x258>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e052      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e04e      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b42:	e04a      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b44:	2308      	movs	r3, #8
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e046      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e042      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <UART_SetConfig+0x2c4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d13a      	bne.n	8006bd4 <UART_SetConfig+0x2e0>
 8006b5e:	4b18      	ldr	r3, [pc, #96]	; (8006bc0 <UART_SetConfig+0x2cc>)
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b6c:	d01a      	beq.n	8006ba4 <UART_SetConfig+0x2b0>
 8006b6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b72:	d81b      	bhi.n	8006bac <UART_SetConfig+0x2b8>
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b78:	d00c      	beq.n	8006b94 <UART_SetConfig+0x2a0>
 8006b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7e:	d815      	bhi.n	8006bac <UART_SetConfig+0x2b8>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <UART_SetConfig+0x298>
 8006b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b88:	d008      	beq.n	8006b9c <UART_SetConfig+0x2a8>
 8006b8a:	e00f      	b.n	8006bac <UART_SetConfig+0x2b8>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e022      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b94:	2302      	movs	r3, #2
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e01e      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba2:	e01a      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006ba4:	2308      	movs	r3, #8
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006baa:	e016      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006bac:	2310      	movs	r3, #16
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb2:	e012      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006bb4:	efff69f3 	.word	0xefff69f3
 8006bb8:	40008000 	.word	0x40008000
 8006bbc:	40013800 	.word	0x40013800
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	40004400 	.word	0x40004400
 8006bc8:	40004800 	.word	0x40004800
 8006bcc:	40004c00 	.word	0x40004c00
 8006bd0:	40005000 	.word	0x40005000
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a9f      	ldr	r2, [pc, #636]	; (8006e5c <UART_SetConfig+0x568>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d17a      	bne.n	8006cda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d824      	bhi.n	8006c36 <UART_SetConfig+0x342>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <UART_SetConfig+0x300>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c37 	.word	0x08006c37
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c37 	.word	0x08006c37
 8006c04:	08006c27 	.word	0x08006c27
 8006c08:	08006c37 	.word	0x08006c37
 8006c0c:	08006c37 	.word	0x08006c37
 8006c10:	08006c37 	.word	0x08006c37
 8006c14:	08006c2f 	.word	0x08006c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7fd fe20 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8006c1c:	61f8      	str	r0, [r7, #28]
        break;
 8006c1e:	e010      	b.n	8006c42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b8f      	ldr	r3, [pc, #572]	; (8006e60 <UART_SetConfig+0x56c>)
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e00d      	b.n	8006c42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c26:	f7fd fd81 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8006c2a:	61f8      	str	r0, [r7, #28]
        break;
 8006c2c:	e009      	b.n	8006c42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	61fb      	str	r3, [r7, #28]
        break;
 8006c34:	e005      	b.n	8006c42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80fb 	beq.w	8006e40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d305      	bcc.n	8006c66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d903      	bls.n	8006c6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c6c:	e0e8      	b.n	8006e40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2200      	movs	r2, #0
 8006c72:	461c      	mov	r4, r3
 8006c74:	4615      	mov	r5, r2
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	022b      	lsls	r3, r5, #8
 8006c80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c84:	0222      	lsls	r2, r4, #8
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	6849      	ldr	r1, [r1, #4]
 8006c8a:	0849      	lsrs	r1, r1, #1
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4688      	mov	r8, r1
 8006c90:	4681      	mov	r9, r0
 8006c92:	eb12 0a08 	adds.w	sl, r2, r8
 8006c96:	eb43 0b09 	adc.w	fp, r3, r9
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	f7f9 fae8 	bl	8000280 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cbe:	d308      	bcc.n	8006cd2 <UART_SetConfig+0x3de>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc6:	d204      	bcs.n	8006cd2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	60da      	str	r2, [r3, #12]
 8006cd0:	e0b6      	b.n	8006e40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cd8:	e0b2      	b.n	8006e40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	d15e      	bne.n	8006da2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d828      	bhi.n	8006d3e <UART_SetConfig+0x44a>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <UART_SetConfig+0x400>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	08006d3f 	.word	0x08006d3f
 8006d04:	08006d2f 	.word	0x08006d2f
 8006d08:	08006d3f 	.word	0x08006d3f
 8006d0c:	08006d3f 	.word	0x08006d3f
 8006d10:	08006d3f 	.word	0x08006d3f
 8006d14:	08006d37 	.word	0x08006d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d18:	f7fd fda0 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8006d1c:	61f8      	str	r0, [r7, #28]
        break;
 8006d1e:	e014      	b.n	8006d4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d20:	f7fd fdb2 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8006d24:	61f8      	str	r0, [r7, #28]
        break;
 8006d26:	e010      	b.n	8006d4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d28:	4b4d      	ldr	r3, [pc, #308]	; (8006e60 <UART_SetConfig+0x56c>)
 8006d2a:	61fb      	str	r3, [r7, #28]
        break;
 8006d2c:	e00d      	b.n	8006d4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d2e:	f7fd fcfd 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8006d32:	61f8      	str	r0, [r7, #28]
        break;
 8006d34:	e009      	b.n	8006d4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3a:	61fb      	str	r3, [r7, #28]
        break;
 8006d3c:	e005      	b.n	8006d4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d077      	beq.n	8006e40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	005a      	lsls	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b0f      	cmp	r3, #15
 8006d6a:	d916      	bls.n	8006d9a <UART_SetConfig+0x4a6>
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d72:	d212      	bcs.n	8006d9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f023 030f 	bic.w	r3, r3, #15
 8006d7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	8afb      	ldrh	r3, [r7, #22]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	8afa      	ldrh	r2, [r7, #22]
 8006d96:	60da      	str	r2, [r3, #12]
 8006d98:	e052      	b.n	8006e40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006da0:	e04e      	b.n	8006e40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d827      	bhi.n	8006dfa <UART_SetConfig+0x506>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x4bc>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006ddd 	.word	0x08006ddd
 8006db8:	08006de5 	.word	0x08006de5
 8006dbc:	08006dfb 	.word	0x08006dfb
 8006dc0:	08006deb 	.word	0x08006deb
 8006dc4:	08006dfb 	.word	0x08006dfb
 8006dc8:	08006dfb 	.word	0x08006dfb
 8006dcc:	08006dfb 	.word	0x08006dfb
 8006dd0:	08006df3 	.word	0x08006df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd4:	f7fd fd42 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8006dd8:	61f8      	str	r0, [r7, #28]
        break;
 8006dda:	e014      	b.n	8006e06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ddc:	f7fd fd54 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8006de0:	61f8      	str	r0, [r7, #28]
        break;
 8006de2:	e010      	b.n	8006e06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de4:	4b1e      	ldr	r3, [pc, #120]	; (8006e60 <UART_SetConfig+0x56c>)
 8006de6:	61fb      	str	r3, [r7, #28]
        break;
 8006de8:	e00d      	b.n	8006e06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dea:	f7fd fc9f 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8006dee:	61f8      	str	r0, [r7, #28]
        break;
 8006df0:	e009      	b.n	8006e06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df6:	61fb      	str	r3, [r7, #28]
        break;
 8006df8:	e005      	b.n	8006e06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e04:	bf00      	nop
    }

    if (pclk != 0U)
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d019      	beq.n	8006e40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	085a      	lsrs	r2, r3, #1
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	441a      	add	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	2b0f      	cmp	r3, #15
 8006e24:	d909      	bls.n	8006e3a <UART_SetConfig+0x546>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e2c:	d205      	bcs.n	8006e3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	e002      	b.n	8006e40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3728      	adds	r7, #40	; 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40008000 	.word	0x40008000
 8006e60:	00f42400 	.word	0x00f42400

08006e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01a      	beq.n	8006f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f62:	d10a      	bne.n	8006f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b098      	sub	sp, #96	; 0x60
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fb8:	f7fa f95a 	bl	8001270 <HAL_GetTick>
 8006fbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d12e      	bne.n	800702a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f88c 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d021      	beq.n	800702a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007004:	647b      	str	r3, [r7, #68]	; 0x44
 8007006:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800700a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e6      	bne.n	8006fe6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e062      	b.n	80070f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b04      	cmp	r3, #4
 8007036:	d149      	bne.n	80070cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007040:	2200      	movs	r2, #0
 8007042:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f856 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03c      	beq.n	80070cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	623b      	str	r3, [r7, #32]
   return(result);
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007070:	633b      	str	r3, [r7, #48]	; 0x30
 8007072:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	60fb      	str	r3, [r7, #12]
   return(result);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	64bb      	str	r3, [r7, #72]	; 0x48
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3308      	adds	r3, #8
 80070a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a4:	61fa      	str	r2, [r7, #28]
 80070a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	69b9      	ldr	r1, [r7, #24]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	617b      	str	r3, [r7, #20]
   return(result);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e011      	b.n	80070f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3758      	adds	r7, #88	; 0x58
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007108:	e049      	b.n	800719e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d045      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007112:	f7fa f8ad 	bl	8001270 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	429a      	cmp	r2, r3
 8007120:	d302      	bcc.n	8007128 <UART_WaitOnFlagUntilTimeout+0x30>
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e048      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d031      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b08      	cmp	r3, #8
 8007146:	d110      	bne.n	800716a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2208      	movs	r2, #8
 800714e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f838 	bl	80071c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2208      	movs	r2, #8
 800715a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e029      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007178:	d111      	bne.n	800719e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 f81e 	bl	80071c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e00f      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69da      	ldr	r2, [r3, #28]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4013      	ands	r3, r2
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	bf0c      	ite	eq
 80071ae:	2301      	moveq	r3, #1
 80071b0:	2300      	movne	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d0a6      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b095      	sub	sp, #84	; 0x54
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ec:	643b      	str	r3, [r7, #64]	; 0x40
 80071ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e6      	bne.n	80071ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3308      	adds	r3, #8
 8007206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f023 0301 	bic.w	r3, r3, #1
 8007216:	64bb      	str	r3, [r7, #72]	; 0x48
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3308      	adds	r3, #8
 800721e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e5      	bne.n	8007200 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007238:	2b01      	cmp	r3, #1
 800723a:	d118      	bne.n	800726e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	60bb      	str	r3, [r7, #8]
   return(result);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f023 0310 	bic.w	r3, r3, #16
 8007250:	647b      	str	r3, [r7, #68]	; 0x44
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6979      	ldr	r1, [r7, #20]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	613b      	str	r3, [r7, #16]
   return(result);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e6      	bne.n	800723c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007282:	bf00      	nop
 8007284:	3754      	adds	r7, #84	; 0x54
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff fb0b 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b08f      	sub	sp, #60	; 0x3c
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c6:	2b21      	cmp	r3, #33	; 0x21
 80072c8:	d14d      	bne.n	8007366 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d132      	bne.n	800733c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e6      	bne.n	80072d6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	60bb      	str	r3, [r7, #8]
   return(result);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800731c:	633b      	str	r3, [r7, #48]	; 0x30
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6979      	ldr	r1, [r7, #20]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	613b      	str	r3, [r7, #16]
   return(result);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800733a:	e014      	b.n	8007366 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007340:	781a      	ldrb	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	b292      	uxth	r2, r2
 8007348:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007366:	bf00      	nop
 8007368:	373c      	adds	r7, #60	; 0x3c
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007372:	b480      	push	{r7}
 8007374:	b091      	sub	sp, #68	; 0x44
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800737e:	2b21      	cmp	r3, #33	; 0x21
 8007380:	d151      	bne.n	8007426 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d132      	bne.n	80073f4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	623b      	str	r3, [r7, #32]
   return(result);
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	633b      	str	r3, [r7, #48]	; 0x30
 80073ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	69b9      	ldr	r1, [r7, #24]
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	617b      	str	r3, [r7, #20]
   return(result);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e6      	bne.n	80073c0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80073f2:	e018      	b.n	8007426 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80073fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fc:	881a      	ldrh	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007406:	b292      	uxth	r2, r2
 8007408:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007426:	bf00      	nop
 8007428:	3744      	adds	r7, #68	; 0x44
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b088      	sub	sp, #32
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	60bb      	str	r3, [r7, #8]
   return(result);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800744e:	61fb      	str	r3, [r7, #28]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	61bb      	str	r3, [r7, #24]
 800745a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6979      	ldr	r1, [r7, #20]
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	613b      	str	r3, [r7, #16]
   return(result);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e6      	bne.n	800743a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7f9 f925 	bl	80006c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800747e:	bf00      	nop
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
	...

0800749c <siprintf>:
 800749c:	b40e      	push	{r1, r2, r3}
 800749e:	b500      	push	{lr}
 80074a0:	b09c      	sub	sp, #112	; 0x70
 80074a2:	ab1d      	add	r3, sp, #116	; 0x74
 80074a4:	9002      	str	r0, [sp, #8]
 80074a6:	9006      	str	r0, [sp, #24]
 80074a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074ac:	4809      	ldr	r0, [pc, #36]	; (80074d4 <siprintf+0x38>)
 80074ae:	9107      	str	r1, [sp, #28]
 80074b0:	9104      	str	r1, [sp, #16]
 80074b2:	4909      	ldr	r1, [pc, #36]	; (80074d8 <siprintf+0x3c>)
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	9105      	str	r1, [sp, #20]
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	a902      	add	r1, sp, #8
 80074c0:	f000 f992 	bl	80077e8 <_svfiprintf_r>
 80074c4:	9b02      	ldr	r3, [sp, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	b01c      	add	sp, #112	; 0x70
 80074cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d0:	b003      	add	sp, #12
 80074d2:	4770      	bx	lr
 80074d4:	2000005c 	.word	0x2000005c
 80074d8:	ffff0208 	.word	0xffff0208

080074dc <memset>:
 80074dc:	4402      	add	r2, r0
 80074de:	4603      	mov	r3, r0
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d100      	bne.n	80074e6 <memset+0xa>
 80074e4:	4770      	bx	lr
 80074e6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ea:	e7f9      	b.n	80074e0 <memset+0x4>

080074ec <__errno>:
 80074ec:	4b01      	ldr	r3, [pc, #4]	; (80074f4 <__errno+0x8>)
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	2000005c 	.word	0x2000005c

080074f8 <__libc_init_array>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4d0d      	ldr	r5, [pc, #52]	; (8007530 <__libc_init_array+0x38>)
 80074fc:	4c0d      	ldr	r4, [pc, #52]	; (8007534 <__libc_init_array+0x3c>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	2600      	movs	r6, #0
 8007504:	42a6      	cmp	r6, r4
 8007506:	d109      	bne.n	800751c <__libc_init_array+0x24>
 8007508:	4d0b      	ldr	r5, [pc, #44]	; (8007538 <__libc_init_array+0x40>)
 800750a:	4c0c      	ldr	r4, [pc, #48]	; (800753c <__libc_init_array+0x44>)
 800750c:	f000 fc6a 	bl	8007de4 <_init>
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	2600      	movs	r6, #0
 8007516:	42a6      	cmp	r6, r4
 8007518:	d105      	bne.n	8007526 <__libc_init_array+0x2e>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007520:	4798      	blx	r3
 8007522:	3601      	adds	r6, #1
 8007524:	e7ee      	b.n	8007504 <__libc_init_array+0xc>
 8007526:	f855 3b04 	ldr.w	r3, [r5], #4
 800752a:	4798      	blx	r3
 800752c:	3601      	adds	r6, #1
 800752e:	e7f2      	b.n	8007516 <__libc_init_array+0x1e>
 8007530:	08007ed8 	.word	0x08007ed8
 8007534:	08007ed8 	.word	0x08007ed8
 8007538:	08007ed8 	.word	0x08007ed8
 800753c:	08007edc 	.word	0x08007edc

08007540 <__retarget_lock_acquire_recursive>:
 8007540:	4770      	bx	lr

08007542 <__retarget_lock_release_recursive>:
 8007542:	4770      	bx	lr

08007544 <_free_r>:
 8007544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007546:	2900      	cmp	r1, #0
 8007548:	d044      	beq.n	80075d4 <_free_r+0x90>
 800754a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754e:	9001      	str	r0, [sp, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f1a1 0404 	sub.w	r4, r1, #4
 8007556:	bfb8      	it	lt
 8007558:	18e4      	addlt	r4, r4, r3
 800755a:	f000 f8df 	bl	800771c <__malloc_lock>
 800755e:	4a1e      	ldr	r2, [pc, #120]	; (80075d8 <_free_r+0x94>)
 8007560:	9801      	ldr	r0, [sp, #4]
 8007562:	6813      	ldr	r3, [r2, #0]
 8007564:	b933      	cbnz	r3, 8007574 <_free_r+0x30>
 8007566:	6063      	str	r3, [r4, #4]
 8007568:	6014      	str	r4, [r2, #0]
 800756a:	b003      	add	sp, #12
 800756c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007570:	f000 b8da 	b.w	8007728 <__malloc_unlock>
 8007574:	42a3      	cmp	r3, r4
 8007576:	d908      	bls.n	800758a <_free_r+0x46>
 8007578:	6825      	ldr	r5, [r4, #0]
 800757a:	1961      	adds	r1, r4, r5
 800757c:	428b      	cmp	r3, r1
 800757e:	bf01      	itttt	eq
 8007580:	6819      	ldreq	r1, [r3, #0]
 8007582:	685b      	ldreq	r3, [r3, #4]
 8007584:	1949      	addeq	r1, r1, r5
 8007586:	6021      	streq	r1, [r4, #0]
 8007588:	e7ed      	b.n	8007566 <_free_r+0x22>
 800758a:	461a      	mov	r2, r3
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	b10b      	cbz	r3, 8007594 <_free_r+0x50>
 8007590:	42a3      	cmp	r3, r4
 8007592:	d9fa      	bls.n	800758a <_free_r+0x46>
 8007594:	6811      	ldr	r1, [r2, #0]
 8007596:	1855      	adds	r5, r2, r1
 8007598:	42a5      	cmp	r5, r4
 800759a:	d10b      	bne.n	80075b4 <_free_r+0x70>
 800759c:	6824      	ldr	r4, [r4, #0]
 800759e:	4421      	add	r1, r4
 80075a0:	1854      	adds	r4, r2, r1
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	6011      	str	r1, [r2, #0]
 80075a6:	d1e0      	bne.n	800756a <_free_r+0x26>
 80075a8:	681c      	ldr	r4, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	6053      	str	r3, [r2, #4]
 80075ae:	440c      	add	r4, r1
 80075b0:	6014      	str	r4, [r2, #0]
 80075b2:	e7da      	b.n	800756a <_free_r+0x26>
 80075b4:	d902      	bls.n	80075bc <_free_r+0x78>
 80075b6:	230c      	movs	r3, #12
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	e7d6      	b.n	800756a <_free_r+0x26>
 80075bc:	6825      	ldr	r5, [r4, #0]
 80075be:	1961      	adds	r1, r4, r5
 80075c0:	428b      	cmp	r3, r1
 80075c2:	bf04      	itt	eq
 80075c4:	6819      	ldreq	r1, [r3, #0]
 80075c6:	685b      	ldreq	r3, [r3, #4]
 80075c8:	6063      	str	r3, [r4, #4]
 80075ca:	bf04      	itt	eq
 80075cc:	1949      	addeq	r1, r1, r5
 80075ce:	6021      	streq	r1, [r4, #0]
 80075d0:	6054      	str	r4, [r2, #4]
 80075d2:	e7ca      	b.n	800756a <_free_r+0x26>
 80075d4:	b003      	add	sp, #12
 80075d6:	bd30      	pop	{r4, r5, pc}
 80075d8:	20000380 	.word	0x20000380

080075dc <sbrk_aligned>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4e0e      	ldr	r6, [pc, #56]	; (8007618 <sbrk_aligned+0x3c>)
 80075e0:	460c      	mov	r4, r1
 80075e2:	6831      	ldr	r1, [r6, #0]
 80075e4:	4605      	mov	r5, r0
 80075e6:	b911      	cbnz	r1, 80075ee <sbrk_aligned+0x12>
 80075e8:	f000 fba6 	bl	8007d38 <_sbrk_r>
 80075ec:	6030      	str	r0, [r6, #0]
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 fba1 	bl	8007d38 <_sbrk_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d00a      	beq.n	8007610 <sbrk_aligned+0x34>
 80075fa:	1cc4      	adds	r4, r0, #3
 80075fc:	f024 0403 	bic.w	r4, r4, #3
 8007600:	42a0      	cmp	r0, r4
 8007602:	d007      	beq.n	8007614 <sbrk_aligned+0x38>
 8007604:	1a21      	subs	r1, r4, r0
 8007606:	4628      	mov	r0, r5
 8007608:	f000 fb96 	bl	8007d38 <_sbrk_r>
 800760c:	3001      	adds	r0, #1
 800760e:	d101      	bne.n	8007614 <sbrk_aligned+0x38>
 8007610:	f04f 34ff 	mov.w	r4, #4294967295
 8007614:	4620      	mov	r0, r4
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	20000384 	.word	0x20000384

0800761c <_malloc_r>:
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007620:	1ccd      	adds	r5, r1, #3
 8007622:	f025 0503 	bic.w	r5, r5, #3
 8007626:	3508      	adds	r5, #8
 8007628:	2d0c      	cmp	r5, #12
 800762a:	bf38      	it	cc
 800762c:	250c      	movcc	r5, #12
 800762e:	2d00      	cmp	r5, #0
 8007630:	4607      	mov	r7, r0
 8007632:	db01      	blt.n	8007638 <_malloc_r+0x1c>
 8007634:	42a9      	cmp	r1, r5
 8007636:	d905      	bls.n	8007644 <_malloc_r+0x28>
 8007638:	230c      	movs	r3, #12
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	2600      	movs	r6, #0
 800763e:	4630      	mov	r0, r6
 8007640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007718 <_malloc_r+0xfc>
 8007648:	f000 f868 	bl	800771c <__malloc_lock>
 800764c:	f8d8 3000 	ldr.w	r3, [r8]
 8007650:	461c      	mov	r4, r3
 8007652:	bb5c      	cbnz	r4, 80076ac <_malloc_r+0x90>
 8007654:	4629      	mov	r1, r5
 8007656:	4638      	mov	r0, r7
 8007658:	f7ff ffc0 	bl	80075dc <sbrk_aligned>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	4604      	mov	r4, r0
 8007660:	d155      	bne.n	800770e <_malloc_r+0xf2>
 8007662:	f8d8 4000 	ldr.w	r4, [r8]
 8007666:	4626      	mov	r6, r4
 8007668:	2e00      	cmp	r6, #0
 800766a:	d145      	bne.n	80076f8 <_malloc_r+0xdc>
 800766c:	2c00      	cmp	r4, #0
 800766e:	d048      	beq.n	8007702 <_malloc_r+0xe6>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	4631      	mov	r1, r6
 8007674:	4638      	mov	r0, r7
 8007676:	eb04 0903 	add.w	r9, r4, r3
 800767a:	f000 fb5d 	bl	8007d38 <_sbrk_r>
 800767e:	4581      	cmp	r9, r0
 8007680:	d13f      	bne.n	8007702 <_malloc_r+0xe6>
 8007682:	6821      	ldr	r1, [r4, #0]
 8007684:	1a6d      	subs	r5, r5, r1
 8007686:	4629      	mov	r1, r5
 8007688:	4638      	mov	r0, r7
 800768a:	f7ff ffa7 	bl	80075dc <sbrk_aligned>
 800768e:	3001      	adds	r0, #1
 8007690:	d037      	beq.n	8007702 <_malloc_r+0xe6>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	442b      	add	r3, r5
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	f8d8 3000 	ldr.w	r3, [r8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d038      	beq.n	8007712 <_malloc_r+0xf6>
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	42a2      	cmp	r2, r4
 80076a4:	d12b      	bne.n	80076fe <_malloc_r+0xe2>
 80076a6:	2200      	movs	r2, #0
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	e00f      	b.n	80076cc <_malloc_r+0xb0>
 80076ac:	6822      	ldr	r2, [r4, #0]
 80076ae:	1b52      	subs	r2, r2, r5
 80076b0:	d41f      	bmi.n	80076f2 <_malloc_r+0xd6>
 80076b2:	2a0b      	cmp	r2, #11
 80076b4:	d917      	bls.n	80076e6 <_malloc_r+0xca>
 80076b6:	1961      	adds	r1, r4, r5
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	6025      	str	r5, [r4, #0]
 80076bc:	bf18      	it	ne
 80076be:	6059      	strne	r1, [r3, #4]
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	bf08      	it	eq
 80076c4:	f8c8 1000 	streq.w	r1, [r8]
 80076c8:	5162      	str	r2, [r4, r5]
 80076ca:	604b      	str	r3, [r1, #4]
 80076cc:	4638      	mov	r0, r7
 80076ce:	f104 060b 	add.w	r6, r4, #11
 80076d2:	f000 f829 	bl	8007728 <__malloc_unlock>
 80076d6:	f026 0607 	bic.w	r6, r6, #7
 80076da:	1d23      	adds	r3, r4, #4
 80076dc:	1af2      	subs	r2, r6, r3
 80076de:	d0ae      	beq.n	800763e <_malloc_r+0x22>
 80076e0:	1b9b      	subs	r3, r3, r6
 80076e2:	50a3      	str	r3, [r4, r2]
 80076e4:	e7ab      	b.n	800763e <_malloc_r+0x22>
 80076e6:	42a3      	cmp	r3, r4
 80076e8:	6862      	ldr	r2, [r4, #4]
 80076ea:	d1dd      	bne.n	80076a8 <_malloc_r+0x8c>
 80076ec:	f8c8 2000 	str.w	r2, [r8]
 80076f0:	e7ec      	b.n	80076cc <_malloc_r+0xb0>
 80076f2:	4623      	mov	r3, r4
 80076f4:	6864      	ldr	r4, [r4, #4]
 80076f6:	e7ac      	b.n	8007652 <_malloc_r+0x36>
 80076f8:	4634      	mov	r4, r6
 80076fa:	6876      	ldr	r6, [r6, #4]
 80076fc:	e7b4      	b.n	8007668 <_malloc_r+0x4c>
 80076fe:	4613      	mov	r3, r2
 8007700:	e7cc      	b.n	800769c <_malloc_r+0x80>
 8007702:	230c      	movs	r3, #12
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	4638      	mov	r0, r7
 8007708:	f000 f80e 	bl	8007728 <__malloc_unlock>
 800770c:	e797      	b.n	800763e <_malloc_r+0x22>
 800770e:	6025      	str	r5, [r4, #0]
 8007710:	e7dc      	b.n	80076cc <_malloc_r+0xb0>
 8007712:	605b      	str	r3, [r3, #4]
 8007714:	deff      	udf	#255	; 0xff
 8007716:	bf00      	nop
 8007718:	20000380 	.word	0x20000380

0800771c <__malloc_lock>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__malloc_lock+0x8>)
 800771e:	f7ff bf0f 	b.w	8007540 <__retarget_lock_acquire_recursive>
 8007722:	bf00      	nop
 8007724:	2000037c 	.word	0x2000037c

08007728 <__malloc_unlock>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__malloc_unlock+0x8>)
 800772a:	f7ff bf0a 	b.w	8007542 <__retarget_lock_release_recursive>
 800772e:	bf00      	nop
 8007730:	2000037c 	.word	0x2000037c

08007734 <__ssputs_r>:
 8007734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	688e      	ldr	r6, [r1, #8]
 800773a:	461f      	mov	r7, r3
 800773c:	42be      	cmp	r6, r7
 800773e:	680b      	ldr	r3, [r1, #0]
 8007740:	4682      	mov	sl, r0
 8007742:	460c      	mov	r4, r1
 8007744:	4690      	mov	r8, r2
 8007746:	d82c      	bhi.n	80077a2 <__ssputs_r+0x6e>
 8007748:	898a      	ldrh	r2, [r1, #12]
 800774a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800774e:	d026      	beq.n	800779e <__ssputs_r+0x6a>
 8007750:	6965      	ldr	r5, [r4, #20]
 8007752:	6909      	ldr	r1, [r1, #16]
 8007754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007758:	eba3 0901 	sub.w	r9, r3, r1
 800775c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007760:	1c7b      	adds	r3, r7, #1
 8007762:	444b      	add	r3, r9
 8007764:	106d      	asrs	r5, r5, #1
 8007766:	429d      	cmp	r5, r3
 8007768:	bf38      	it	cc
 800776a:	461d      	movcc	r5, r3
 800776c:	0553      	lsls	r3, r2, #21
 800776e:	d527      	bpl.n	80077c0 <__ssputs_r+0x8c>
 8007770:	4629      	mov	r1, r5
 8007772:	f7ff ff53 	bl	800761c <_malloc_r>
 8007776:	4606      	mov	r6, r0
 8007778:	b360      	cbz	r0, 80077d4 <__ssputs_r+0xa0>
 800777a:	6921      	ldr	r1, [r4, #16]
 800777c:	464a      	mov	r2, r9
 800777e:	f000 faeb 	bl	8007d58 <memcpy>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	6126      	str	r6, [r4, #16]
 8007790:	6165      	str	r5, [r4, #20]
 8007792:	444e      	add	r6, r9
 8007794:	eba5 0509 	sub.w	r5, r5, r9
 8007798:	6026      	str	r6, [r4, #0]
 800779a:	60a5      	str	r5, [r4, #8]
 800779c:	463e      	mov	r6, r7
 800779e:	42be      	cmp	r6, r7
 80077a0:	d900      	bls.n	80077a4 <__ssputs_r+0x70>
 80077a2:	463e      	mov	r6, r7
 80077a4:	6820      	ldr	r0, [r4, #0]
 80077a6:	4632      	mov	r2, r6
 80077a8:	4641      	mov	r1, r8
 80077aa:	f000 faab 	bl	8007d04 <memmove>
 80077ae:	68a3      	ldr	r3, [r4, #8]
 80077b0:	1b9b      	subs	r3, r3, r6
 80077b2:	60a3      	str	r3, [r4, #8]
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	4433      	add	r3, r6
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	2000      	movs	r0, #0
 80077bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c0:	462a      	mov	r2, r5
 80077c2:	f000 fad7 	bl	8007d74 <_realloc_r>
 80077c6:	4606      	mov	r6, r0
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1e0      	bne.n	800778e <__ssputs_r+0x5a>
 80077cc:	6921      	ldr	r1, [r4, #16]
 80077ce:	4650      	mov	r0, sl
 80077d0:	f7ff feb8 	bl	8007544 <_free_r>
 80077d4:	230c      	movs	r3, #12
 80077d6:	f8ca 3000 	str.w	r3, [sl]
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	f04f 30ff 	mov.w	r0, #4294967295
 80077e6:	e7e9      	b.n	80077bc <__ssputs_r+0x88>

080077e8 <_svfiprintf_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	4698      	mov	r8, r3
 80077ee:	898b      	ldrh	r3, [r1, #12]
 80077f0:	061b      	lsls	r3, r3, #24
 80077f2:	b09d      	sub	sp, #116	; 0x74
 80077f4:	4607      	mov	r7, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	4614      	mov	r4, r2
 80077fa:	d50e      	bpl.n	800781a <_svfiprintf_r+0x32>
 80077fc:	690b      	ldr	r3, [r1, #16]
 80077fe:	b963      	cbnz	r3, 800781a <_svfiprintf_r+0x32>
 8007800:	2140      	movs	r1, #64	; 0x40
 8007802:	f7ff ff0b 	bl	800761c <_malloc_r>
 8007806:	6028      	str	r0, [r5, #0]
 8007808:	6128      	str	r0, [r5, #16]
 800780a:	b920      	cbnz	r0, 8007816 <_svfiprintf_r+0x2e>
 800780c:	230c      	movs	r3, #12
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	e0d0      	b.n	80079b8 <_svfiprintf_r+0x1d0>
 8007816:	2340      	movs	r3, #64	; 0x40
 8007818:	616b      	str	r3, [r5, #20]
 800781a:	2300      	movs	r3, #0
 800781c:	9309      	str	r3, [sp, #36]	; 0x24
 800781e:	2320      	movs	r3, #32
 8007820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007824:	f8cd 800c 	str.w	r8, [sp, #12]
 8007828:	2330      	movs	r3, #48	; 0x30
 800782a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80079d0 <_svfiprintf_r+0x1e8>
 800782e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007832:	f04f 0901 	mov.w	r9, #1
 8007836:	4623      	mov	r3, r4
 8007838:	469a      	mov	sl, r3
 800783a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800783e:	b10a      	cbz	r2, 8007844 <_svfiprintf_r+0x5c>
 8007840:	2a25      	cmp	r2, #37	; 0x25
 8007842:	d1f9      	bne.n	8007838 <_svfiprintf_r+0x50>
 8007844:	ebba 0b04 	subs.w	fp, sl, r4
 8007848:	d00b      	beq.n	8007862 <_svfiprintf_r+0x7a>
 800784a:	465b      	mov	r3, fp
 800784c:	4622      	mov	r2, r4
 800784e:	4629      	mov	r1, r5
 8007850:	4638      	mov	r0, r7
 8007852:	f7ff ff6f 	bl	8007734 <__ssputs_r>
 8007856:	3001      	adds	r0, #1
 8007858:	f000 80a9 	beq.w	80079ae <_svfiprintf_r+0x1c6>
 800785c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800785e:	445a      	add	r2, fp
 8007860:	9209      	str	r2, [sp, #36]	; 0x24
 8007862:	f89a 3000 	ldrb.w	r3, [sl]
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 80a1 	beq.w	80079ae <_svfiprintf_r+0x1c6>
 800786c:	2300      	movs	r3, #0
 800786e:	f04f 32ff 	mov.w	r2, #4294967295
 8007872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007876:	f10a 0a01 	add.w	sl, sl, #1
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	9307      	str	r3, [sp, #28]
 800787e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007882:	931a      	str	r3, [sp, #104]	; 0x68
 8007884:	4654      	mov	r4, sl
 8007886:	2205      	movs	r2, #5
 8007888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800788c:	4850      	ldr	r0, [pc, #320]	; (80079d0 <_svfiprintf_r+0x1e8>)
 800788e:	f7f8 fca7 	bl	80001e0 <memchr>
 8007892:	9a04      	ldr	r2, [sp, #16]
 8007894:	b9d8      	cbnz	r0, 80078ce <_svfiprintf_r+0xe6>
 8007896:	06d0      	lsls	r0, r2, #27
 8007898:	bf44      	itt	mi
 800789a:	2320      	movmi	r3, #32
 800789c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078a0:	0711      	lsls	r1, r2, #28
 80078a2:	bf44      	itt	mi
 80078a4:	232b      	movmi	r3, #43	; 0x2b
 80078a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078aa:	f89a 3000 	ldrb.w	r3, [sl]
 80078ae:	2b2a      	cmp	r3, #42	; 0x2a
 80078b0:	d015      	beq.n	80078de <_svfiprintf_r+0xf6>
 80078b2:	9a07      	ldr	r2, [sp, #28]
 80078b4:	4654      	mov	r4, sl
 80078b6:	2000      	movs	r0, #0
 80078b8:	f04f 0c0a 	mov.w	ip, #10
 80078bc:	4621      	mov	r1, r4
 80078be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078c2:	3b30      	subs	r3, #48	; 0x30
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	d94d      	bls.n	8007964 <_svfiprintf_r+0x17c>
 80078c8:	b1b0      	cbz	r0, 80078f8 <_svfiprintf_r+0x110>
 80078ca:	9207      	str	r2, [sp, #28]
 80078cc:	e014      	b.n	80078f8 <_svfiprintf_r+0x110>
 80078ce:	eba0 0308 	sub.w	r3, r0, r8
 80078d2:	fa09 f303 	lsl.w	r3, r9, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	46a2      	mov	sl, r4
 80078dc:	e7d2      	b.n	8007884 <_svfiprintf_r+0x9c>
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	1d19      	adds	r1, r3, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	9103      	str	r1, [sp, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bfbb      	ittet	lt
 80078ea:	425b      	neglt	r3, r3
 80078ec:	f042 0202 	orrlt.w	r2, r2, #2
 80078f0:	9307      	strge	r3, [sp, #28]
 80078f2:	9307      	strlt	r3, [sp, #28]
 80078f4:	bfb8      	it	lt
 80078f6:	9204      	strlt	r2, [sp, #16]
 80078f8:	7823      	ldrb	r3, [r4, #0]
 80078fa:	2b2e      	cmp	r3, #46	; 0x2e
 80078fc:	d10c      	bne.n	8007918 <_svfiprintf_r+0x130>
 80078fe:	7863      	ldrb	r3, [r4, #1]
 8007900:	2b2a      	cmp	r3, #42	; 0x2a
 8007902:	d134      	bne.n	800796e <_svfiprintf_r+0x186>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	1d1a      	adds	r2, r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	9203      	str	r2, [sp, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	bfb8      	it	lt
 8007910:	f04f 33ff 	movlt.w	r3, #4294967295
 8007914:	3402      	adds	r4, #2
 8007916:	9305      	str	r3, [sp, #20]
 8007918:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80079e0 <_svfiprintf_r+0x1f8>
 800791c:	7821      	ldrb	r1, [r4, #0]
 800791e:	2203      	movs	r2, #3
 8007920:	4650      	mov	r0, sl
 8007922:	f7f8 fc5d 	bl	80001e0 <memchr>
 8007926:	b138      	cbz	r0, 8007938 <_svfiprintf_r+0x150>
 8007928:	9b04      	ldr	r3, [sp, #16]
 800792a:	eba0 000a 	sub.w	r0, r0, sl
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	4082      	lsls	r2, r0
 8007932:	4313      	orrs	r3, r2
 8007934:	3401      	adds	r4, #1
 8007936:	9304      	str	r3, [sp, #16]
 8007938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793c:	4825      	ldr	r0, [pc, #148]	; (80079d4 <_svfiprintf_r+0x1ec>)
 800793e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007942:	2206      	movs	r2, #6
 8007944:	f7f8 fc4c 	bl	80001e0 <memchr>
 8007948:	2800      	cmp	r0, #0
 800794a:	d038      	beq.n	80079be <_svfiprintf_r+0x1d6>
 800794c:	4b22      	ldr	r3, [pc, #136]	; (80079d8 <_svfiprintf_r+0x1f0>)
 800794e:	bb1b      	cbnz	r3, 8007998 <_svfiprintf_r+0x1b0>
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	3307      	adds	r3, #7
 8007954:	f023 0307 	bic.w	r3, r3, #7
 8007958:	3308      	adds	r3, #8
 800795a:	9303      	str	r3, [sp, #12]
 800795c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795e:	4433      	add	r3, r6
 8007960:	9309      	str	r3, [sp, #36]	; 0x24
 8007962:	e768      	b.n	8007836 <_svfiprintf_r+0x4e>
 8007964:	fb0c 3202 	mla	r2, ip, r2, r3
 8007968:	460c      	mov	r4, r1
 800796a:	2001      	movs	r0, #1
 800796c:	e7a6      	b.n	80078bc <_svfiprintf_r+0xd4>
 800796e:	2300      	movs	r3, #0
 8007970:	3401      	adds	r4, #1
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	4619      	mov	r1, r3
 8007976:	f04f 0c0a 	mov.w	ip, #10
 800797a:	4620      	mov	r0, r4
 800797c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007980:	3a30      	subs	r2, #48	; 0x30
 8007982:	2a09      	cmp	r2, #9
 8007984:	d903      	bls.n	800798e <_svfiprintf_r+0x1a6>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0c6      	beq.n	8007918 <_svfiprintf_r+0x130>
 800798a:	9105      	str	r1, [sp, #20]
 800798c:	e7c4      	b.n	8007918 <_svfiprintf_r+0x130>
 800798e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007992:	4604      	mov	r4, r0
 8007994:	2301      	movs	r3, #1
 8007996:	e7f0      	b.n	800797a <_svfiprintf_r+0x192>
 8007998:	ab03      	add	r3, sp, #12
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	462a      	mov	r2, r5
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <_svfiprintf_r+0x1f4>)
 80079a0:	a904      	add	r1, sp, #16
 80079a2:	4638      	mov	r0, r7
 80079a4:	f3af 8000 	nop.w
 80079a8:	1c42      	adds	r2, r0, #1
 80079aa:	4606      	mov	r6, r0
 80079ac:	d1d6      	bne.n	800795c <_svfiprintf_r+0x174>
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	065b      	lsls	r3, r3, #25
 80079b2:	f53f af2d 	bmi.w	8007810 <_svfiprintf_r+0x28>
 80079b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079b8:	b01d      	add	sp, #116	; 0x74
 80079ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079be:	ab03      	add	r3, sp, #12
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	462a      	mov	r2, r5
 80079c4:	4b05      	ldr	r3, [pc, #20]	; (80079dc <_svfiprintf_r+0x1f4>)
 80079c6:	a904      	add	r1, sp, #16
 80079c8:	4638      	mov	r0, r7
 80079ca:	f000 f879 	bl	8007ac0 <_printf_i>
 80079ce:	e7eb      	b.n	80079a8 <_svfiprintf_r+0x1c0>
 80079d0:	08007e9c 	.word	0x08007e9c
 80079d4:	08007ea6 	.word	0x08007ea6
 80079d8:	00000000 	.word	0x00000000
 80079dc:	08007735 	.word	0x08007735
 80079e0:	08007ea2 	.word	0x08007ea2

080079e4 <_printf_common>:
 80079e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e8:	4616      	mov	r6, r2
 80079ea:	4699      	mov	r9, r3
 80079ec:	688a      	ldr	r2, [r1, #8]
 80079ee:	690b      	ldr	r3, [r1, #16]
 80079f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	bfb8      	it	lt
 80079f8:	4613      	movlt	r3, r2
 80079fa:	6033      	str	r3, [r6, #0]
 80079fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a00:	4607      	mov	r7, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	b10a      	cbz	r2, 8007a0a <_printf_common+0x26>
 8007a06:	3301      	adds	r3, #1
 8007a08:	6033      	str	r3, [r6, #0]
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	0699      	lsls	r1, r3, #26
 8007a0e:	bf42      	ittt	mi
 8007a10:	6833      	ldrmi	r3, [r6, #0]
 8007a12:	3302      	addmi	r3, #2
 8007a14:	6033      	strmi	r3, [r6, #0]
 8007a16:	6825      	ldr	r5, [r4, #0]
 8007a18:	f015 0506 	ands.w	r5, r5, #6
 8007a1c:	d106      	bne.n	8007a2c <_printf_common+0x48>
 8007a1e:	f104 0a19 	add.w	sl, r4, #25
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	6832      	ldr	r2, [r6, #0]
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	dc26      	bgt.n	8007a7a <_printf_common+0x96>
 8007a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a30:	1e13      	subs	r3, r2, #0
 8007a32:	6822      	ldr	r2, [r4, #0]
 8007a34:	bf18      	it	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	0692      	lsls	r2, r2, #26
 8007a3a:	d42b      	bmi.n	8007a94 <_printf_common+0xb0>
 8007a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a40:	4649      	mov	r1, r9
 8007a42:	4638      	mov	r0, r7
 8007a44:	47c0      	blx	r8
 8007a46:	3001      	adds	r0, #1
 8007a48:	d01e      	beq.n	8007a88 <_printf_common+0xa4>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	6922      	ldr	r2, [r4, #16]
 8007a4e:	f003 0306 	and.w	r3, r3, #6
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	bf02      	ittt	eq
 8007a56:	68e5      	ldreq	r5, [r4, #12]
 8007a58:	6833      	ldreq	r3, [r6, #0]
 8007a5a:	1aed      	subeq	r5, r5, r3
 8007a5c:	68a3      	ldr	r3, [r4, #8]
 8007a5e:	bf0c      	ite	eq
 8007a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a64:	2500      	movne	r5, #0
 8007a66:	4293      	cmp	r3, r2
 8007a68:	bfc4      	itt	gt
 8007a6a:	1a9b      	subgt	r3, r3, r2
 8007a6c:	18ed      	addgt	r5, r5, r3
 8007a6e:	2600      	movs	r6, #0
 8007a70:	341a      	adds	r4, #26
 8007a72:	42b5      	cmp	r5, r6
 8007a74:	d11a      	bne.n	8007aac <_printf_common+0xc8>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e008      	b.n	8007a8c <_printf_common+0xa8>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	4649      	mov	r1, r9
 8007a80:	4638      	mov	r0, r7
 8007a82:	47c0      	blx	r8
 8007a84:	3001      	adds	r0, #1
 8007a86:	d103      	bne.n	8007a90 <_printf_common+0xac>
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a90:	3501      	adds	r5, #1
 8007a92:	e7c6      	b.n	8007a22 <_printf_common+0x3e>
 8007a94:	18e1      	adds	r1, r4, r3
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	2030      	movs	r0, #48	; 0x30
 8007a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a9e:	4422      	add	r2, r4
 8007aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	e7c7      	b.n	8007a3c <_printf_common+0x58>
 8007aac:	2301      	movs	r3, #1
 8007aae:	4622      	mov	r2, r4
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	47c0      	blx	r8
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d0e6      	beq.n	8007a88 <_printf_common+0xa4>
 8007aba:	3601      	adds	r6, #1
 8007abc:	e7d9      	b.n	8007a72 <_printf_common+0x8e>
	...

08007ac0 <_printf_i>:
 8007ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac4:	7e0f      	ldrb	r7, [r1, #24]
 8007ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ac8:	2f78      	cmp	r7, #120	; 0x78
 8007aca:	4691      	mov	r9, r2
 8007acc:	4680      	mov	r8, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	469a      	mov	sl, r3
 8007ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ad6:	d807      	bhi.n	8007ae8 <_printf_i+0x28>
 8007ad8:	2f62      	cmp	r7, #98	; 0x62
 8007ada:	d80a      	bhi.n	8007af2 <_printf_i+0x32>
 8007adc:	2f00      	cmp	r7, #0
 8007ade:	f000 80d4 	beq.w	8007c8a <_printf_i+0x1ca>
 8007ae2:	2f58      	cmp	r7, #88	; 0x58
 8007ae4:	f000 80c0 	beq.w	8007c68 <_printf_i+0x1a8>
 8007ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007af0:	e03a      	b.n	8007b68 <_printf_i+0xa8>
 8007af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007af6:	2b15      	cmp	r3, #21
 8007af8:	d8f6      	bhi.n	8007ae8 <_printf_i+0x28>
 8007afa:	a101      	add	r1, pc, #4	; (adr r1, 8007b00 <_printf_i+0x40>)
 8007afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b00:	08007b59 	.word	0x08007b59
 8007b04:	08007b6d 	.word	0x08007b6d
 8007b08:	08007ae9 	.word	0x08007ae9
 8007b0c:	08007ae9 	.word	0x08007ae9
 8007b10:	08007ae9 	.word	0x08007ae9
 8007b14:	08007ae9 	.word	0x08007ae9
 8007b18:	08007b6d 	.word	0x08007b6d
 8007b1c:	08007ae9 	.word	0x08007ae9
 8007b20:	08007ae9 	.word	0x08007ae9
 8007b24:	08007ae9 	.word	0x08007ae9
 8007b28:	08007ae9 	.word	0x08007ae9
 8007b2c:	08007c71 	.word	0x08007c71
 8007b30:	08007b99 	.word	0x08007b99
 8007b34:	08007c2b 	.word	0x08007c2b
 8007b38:	08007ae9 	.word	0x08007ae9
 8007b3c:	08007ae9 	.word	0x08007ae9
 8007b40:	08007c93 	.word	0x08007c93
 8007b44:	08007ae9 	.word	0x08007ae9
 8007b48:	08007b99 	.word	0x08007b99
 8007b4c:	08007ae9 	.word	0x08007ae9
 8007b50:	08007ae9 	.word	0x08007ae9
 8007b54:	08007c33 	.word	0x08007c33
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	1d1a      	adds	r2, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	602a      	str	r2, [r5, #0]
 8007b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e09f      	b.n	8007cac <_printf_i+0x1ec>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	682b      	ldr	r3, [r5, #0]
 8007b70:	0607      	lsls	r7, r0, #24
 8007b72:	f103 0104 	add.w	r1, r3, #4
 8007b76:	6029      	str	r1, [r5, #0]
 8007b78:	d501      	bpl.n	8007b7e <_printf_i+0xbe>
 8007b7a:	681e      	ldr	r6, [r3, #0]
 8007b7c:	e003      	b.n	8007b86 <_printf_i+0xc6>
 8007b7e:	0646      	lsls	r6, r0, #25
 8007b80:	d5fb      	bpl.n	8007b7a <_printf_i+0xba>
 8007b82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	da03      	bge.n	8007b92 <_printf_i+0xd2>
 8007b8a:	232d      	movs	r3, #45	; 0x2d
 8007b8c:	4276      	negs	r6, r6
 8007b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b92:	485a      	ldr	r0, [pc, #360]	; (8007cfc <_printf_i+0x23c>)
 8007b94:	230a      	movs	r3, #10
 8007b96:	e012      	b.n	8007bbe <_printf_i+0xfe>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	6820      	ldr	r0, [r4, #0]
 8007b9c:	1d19      	adds	r1, r3, #4
 8007b9e:	6029      	str	r1, [r5, #0]
 8007ba0:	0605      	lsls	r5, r0, #24
 8007ba2:	d501      	bpl.n	8007ba8 <_printf_i+0xe8>
 8007ba4:	681e      	ldr	r6, [r3, #0]
 8007ba6:	e002      	b.n	8007bae <_printf_i+0xee>
 8007ba8:	0641      	lsls	r1, r0, #25
 8007baa:	d5fb      	bpl.n	8007ba4 <_printf_i+0xe4>
 8007bac:	881e      	ldrh	r6, [r3, #0]
 8007bae:	4853      	ldr	r0, [pc, #332]	; (8007cfc <_printf_i+0x23c>)
 8007bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8007bb2:	bf0c      	ite	eq
 8007bb4:	2308      	moveq	r3, #8
 8007bb6:	230a      	movne	r3, #10
 8007bb8:	2100      	movs	r1, #0
 8007bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bbe:	6865      	ldr	r5, [r4, #4]
 8007bc0:	60a5      	str	r5, [r4, #8]
 8007bc2:	2d00      	cmp	r5, #0
 8007bc4:	bfa2      	ittt	ge
 8007bc6:	6821      	ldrge	r1, [r4, #0]
 8007bc8:	f021 0104 	bicge.w	r1, r1, #4
 8007bcc:	6021      	strge	r1, [r4, #0]
 8007bce:	b90e      	cbnz	r6, 8007bd4 <_printf_i+0x114>
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	d04b      	beq.n	8007c6c <_printf_i+0x1ac>
 8007bd4:	4615      	mov	r5, r2
 8007bd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bda:	fb03 6711 	mls	r7, r3, r1, r6
 8007bde:	5dc7      	ldrb	r7, [r0, r7]
 8007be0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007be4:	4637      	mov	r7, r6
 8007be6:	42bb      	cmp	r3, r7
 8007be8:	460e      	mov	r6, r1
 8007bea:	d9f4      	bls.n	8007bd6 <_printf_i+0x116>
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d10b      	bne.n	8007c08 <_printf_i+0x148>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	07de      	lsls	r6, r3, #31
 8007bf4:	d508      	bpl.n	8007c08 <_printf_i+0x148>
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	6861      	ldr	r1, [r4, #4]
 8007bfa:	4299      	cmp	r1, r3
 8007bfc:	bfde      	ittt	le
 8007bfe:	2330      	movle	r3, #48	; 0x30
 8007c00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c08:	1b52      	subs	r2, r2, r5
 8007c0a:	6122      	str	r2, [r4, #16]
 8007c0c:	f8cd a000 	str.w	sl, [sp]
 8007c10:	464b      	mov	r3, r9
 8007c12:	aa03      	add	r2, sp, #12
 8007c14:	4621      	mov	r1, r4
 8007c16:	4640      	mov	r0, r8
 8007c18:	f7ff fee4 	bl	80079e4 <_printf_common>
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d14a      	bne.n	8007cb6 <_printf_i+0x1f6>
 8007c20:	f04f 30ff 	mov.w	r0, #4294967295
 8007c24:	b004      	add	sp, #16
 8007c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	f043 0320 	orr.w	r3, r3, #32
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	4833      	ldr	r0, [pc, #204]	; (8007d00 <_printf_i+0x240>)
 8007c34:	2778      	movs	r7, #120	; 0x78
 8007c36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	6829      	ldr	r1, [r5, #0]
 8007c3e:	061f      	lsls	r7, r3, #24
 8007c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c44:	d402      	bmi.n	8007c4c <_printf_i+0x18c>
 8007c46:	065f      	lsls	r7, r3, #25
 8007c48:	bf48      	it	mi
 8007c4a:	b2b6      	uxthmi	r6, r6
 8007c4c:	07df      	lsls	r7, r3, #31
 8007c4e:	bf48      	it	mi
 8007c50:	f043 0320 	orrmi.w	r3, r3, #32
 8007c54:	6029      	str	r1, [r5, #0]
 8007c56:	bf48      	it	mi
 8007c58:	6023      	strmi	r3, [r4, #0]
 8007c5a:	b91e      	cbnz	r6, 8007c64 <_printf_i+0x1a4>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	f023 0320 	bic.w	r3, r3, #32
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	2310      	movs	r3, #16
 8007c66:	e7a7      	b.n	8007bb8 <_printf_i+0xf8>
 8007c68:	4824      	ldr	r0, [pc, #144]	; (8007cfc <_printf_i+0x23c>)
 8007c6a:	e7e4      	b.n	8007c36 <_printf_i+0x176>
 8007c6c:	4615      	mov	r5, r2
 8007c6e:	e7bd      	b.n	8007bec <_printf_i+0x12c>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	6826      	ldr	r6, [r4, #0]
 8007c74:	6961      	ldr	r1, [r4, #20]
 8007c76:	1d18      	adds	r0, r3, #4
 8007c78:	6028      	str	r0, [r5, #0]
 8007c7a:	0635      	lsls	r5, r6, #24
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	d501      	bpl.n	8007c84 <_printf_i+0x1c4>
 8007c80:	6019      	str	r1, [r3, #0]
 8007c82:	e002      	b.n	8007c8a <_printf_i+0x1ca>
 8007c84:	0670      	lsls	r0, r6, #25
 8007c86:	d5fb      	bpl.n	8007c80 <_printf_i+0x1c0>
 8007c88:	8019      	strh	r1, [r3, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	6123      	str	r3, [r4, #16]
 8007c8e:	4615      	mov	r5, r2
 8007c90:	e7bc      	b.n	8007c0c <_printf_i+0x14c>
 8007c92:	682b      	ldr	r3, [r5, #0]
 8007c94:	1d1a      	adds	r2, r3, #4
 8007c96:	602a      	str	r2, [r5, #0]
 8007c98:	681d      	ldr	r5, [r3, #0]
 8007c9a:	6862      	ldr	r2, [r4, #4]
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f7f8 fa9e 	bl	80001e0 <memchr>
 8007ca4:	b108      	cbz	r0, 8007caa <_printf_i+0x1ea>
 8007ca6:	1b40      	subs	r0, r0, r5
 8007ca8:	6060      	str	r0, [r4, #4]
 8007caa:	6863      	ldr	r3, [r4, #4]
 8007cac:	6123      	str	r3, [r4, #16]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb4:	e7aa      	b.n	8007c0c <_printf_i+0x14c>
 8007cb6:	6923      	ldr	r3, [r4, #16]
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4649      	mov	r1, r9
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	47d0      	blx	sl
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d0ad      	beq.n	8007c20 <_printf_i+0x160>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	079b      	lsls	r3, r3, #30
 8007cc8:	d413      	bmi.n	8007cf2 <_printf_i+0x232>
 8007cca:	68e0      	ldr	r0, [r4, #12]
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	4298      	cmp	r0, r3
 8007cd0:	bfb8      	it	lt
 8007cd2:	4618      	movlt	r0, r3
 8007cd4:	e7a6      	b.n	8007c24 <_printf_i+0x164>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4632      	mov	r2, r6
 8007cda:	4649      	mov	r1, r9
 8007cdc:	4640      	mov	r0, r8
 8007cde:	47d0      	blx	sl
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d09d      	beq.n	8007c20 <_printf_i+0x160>
 8007ce4:	3501      	adds	r5, #1
 8007ce6:	68e3      	ldr	r3, [r4, #12]
 8007ce8:	9903      	ldr	r1, [sp, #12]
 8007cea:	1a5b      	subs	r3, r3, r1
 8007cec:	42ab      	cmp	r3, r5
 8007cee:	dcf2      	bgt.n	8007cd6 <_printf_i+0x216>
 8007cf0:	e7eb      	b.n	8007cca <_printf_i+0x20a>
 8007cf2:	2500      	movs	r5, #0
 8007cf4:	f104 0619 	add.w	r6, r4, #25
 8007cf8:	e7f5      	b.n	8007ce6 <_printf_i+0x226>
 8007cfa:	bf00      	nop
 8007cfc:	08007ead 	.word	0x08007ead
 8007d00:	08007ebe 	.word	0x08007ebe

08007d04 <memmove>:
 8007d04:	4288      	cmp	r0, r1
 8007d06:	b510      	push	{r4, lr}
 8007d08:	eb01 0402 	add.w	r4, r1, r2
 8007d0c:	d902      	bls.n	8007d14 <memmove+0x10>
 8007d0e:	4284      	cmp	r4, r0
 8007d10:	4623      	mov	r3, r4
 8007d12:	d807      	bhi.n	8007d24 <memmove+0x20>
 8007d14:	1e43      	subs	r3, r0, #1
 8007d16:	42a1      	cmp	r1, r4
 8007d18:	d008      	beq.n	8007d2c <memmove+0x28>
 8007d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d22:	e7f8      	b.n	8007d16 <memmove+0x12>
 8007d24:	4402      	add	r2, r0
 8007d26:	4601      	mov	r1, r0
 8007d28:	428a      	cmp	r2, r1
 8007d2a:	d100      	bne.n	8007d2e <memmove+0x2a>
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d36:	e7f7      	b.n	8007d28 <memmove+0x24>

08007d38 <_sbrk_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d06      	ldr	r5, [pc, #24]	; (8007d54 <_sbrk_r+0x1c>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7f9 f9b2 	bl	80010ac <_sbrk>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_sbrk_r+0x1a>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_sbrk_r+0x1a>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	20000378 	.word	0x20000378

08007d58 <memcpy>:
 8007d58:	440a      	add	r2, r1
 8007d5a:	4291      	cmp	r1, r2
 8007d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d60:	d100      	bne.n	8007d64 <memcpy+0xc>
 8007d62:	4770      	bx	lr
 8007d64:	b510      	push	{r4, lr}
 8007d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d6e:	4291      	cmp	r1, r2
 8007d70:	d1f9      	bne.n	8007d66 <memcpy+0xe>
 8007d72:	bd10      	pop	{r4, pc}

08007d74 <_realloc_r>:
 8007d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	b921      	cbnz	r1, 8007d8a <_realloc_r+0x16>
 8007d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d84:	4611      	mov	r1, r2
 8007d86:	f7ff bc49 	b.w	800761c <_malloc_r>
 8007d8a:	b92a      	cbnz	r2, 8007d98 <_realloc_r+0x24>
 8007d8c:	f7ff fbda 	bl	8007544 <_free_r>
 8007d90:	4625      	mov	r5, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	f000 f81b 	bl	8007dd2 <_malloc_usable_size_r>
 8007d9c:	4284      	cmp	r4, r0
 8007d9e:	4607      	mov	r7, r0
 8007da0:	d802      	bhi.n	8007da8 <_realloc_r+0x34>
 8007da2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007da6:	d812      	bhi.n	8007dce <_realloc_r+0x5a>
 8007da8:	4621      	mov	r1, r4
 8007daa:	4640      	mov	r0, r8
 8007dac:	f7ff fc36 	bl	800761c <_malloc_r>
 8007db0:	4605      	mov	r5, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d0ed      	beq.n	8007d92 <_realloc_r+0x1e>
 8007db6:	42bc      	cmp	r4, r7
 8007db8:	4622      	mov	r2, r4
 8007dba:	4631      	mov	r1, r6
 8007dbc:	bf28      	it	cs
 8007dbe:	463a      	movcs	r2, r7
 8007dc0:	f7ff ffca 	bl	8007d58 <memcpy>
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f7ff fbbc 	bl	8007544 <_free_r>
 8007dcc:	e7e1      	b.n	8007d92 <_realloc_r+0x1e>
 8007dce:	4635      	mov	r5, r6
 8007dd0:	e7df      	b.n	8007d92 <_realloc_r+0x1e>

08007dd2 <_malloc_usable_size_r>:
 8007dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd6:	1f18      	subs	r0, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bfbc      	itt	lt
 8007ddc:	580b      	ldrlt	r3, [r1, r0]
 8007dde:	18c0      	addlt	r0, r0, r3
 8007de0:	4770      	bx	lr
	...

08007de4 <_init>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr

08007df0 <_fini>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr
